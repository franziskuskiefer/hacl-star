include "../../../arch/x64/X64.Vale.InsBasic.vaf"
include "../../../arch/x64/X64.Vale.InsMem.vaf"
include "../../../arch/x64/X64.Vale.InsVector.vaf"
include "../../../arch/x64/X64.Vale.InsStack.vaf"
include "../../../thirdPartyPorts/Intel/aes/x64/X64.AESCTR.vaf"
include "../../../lib/util/x64/X64.Stack.vaf"
include "X64.AES.vaf"
include "X64.GF128_Mul.vaf"
include "X64.GCTR.vaf"
include "X64.GHash.vaf"
include{:fstar}{:open} "open Opaque_s"
include{:/*TODO*/fstar}{:open} "FStar.Seq.Base"
include{:fstar}{:open} "Words_s"
include{:fstar}{:open} "Words.Seq_s"
include{:fstar}{:open} "Types_s"
include{:fstar}{:open} "Arch.Types"
include{:fstar}{:open} "AES_s"
include{:fstar}{:open} "GCTR_s"
include{:fstar}{:open} "GCTR"
include{:fstar}{:open} "GCM"
include{:fstar}{:open} "GHash_s"
include{:fstar}{:open} "GHash"
include{:fstar}{:open} "GCM_s"
include{:fstar}{:open} "GF128_s"
include{:fstar}{:open} "GF128"
include{:fstar}{:open} "X64.Poly1305.Math"
include{:fstar}{:open} "GCM_helpers"
include{:fstar}{:open} "Workarounds"
include{:fstar}{:open} "X64.Machine_s"
include{:fstar}{:open} "X64.Memory"
include{:fstar}{:open} "X64.Stack_i"
include{:fstar}{:open} "X64.Vale.State"
include{:fstar}{:open} "X64.Vale.Decls"
include{:fstar}{:open} "X64.Vale.QuickCode"
include{:fstar}{:open} "X64.Vale.QuickCodes"
include{:fstar}{:open} "X64.CPU_Features_s"

module X64.GCMencrypt

#verbatim{:interface}{:implementation}
module GHash = GHash
module GCTR = GCTR
open Opaque_s
open FStar.Seq
open Words_s
open Words.Seq_s
open Types_s
open Arch.Types
open AES_s
open GCTR_s
open GCTR
open GCM
open GHash_s
open GHash
open GCM_s
open X64.AES
open GF128_s
open GF128
open X64.Poly1305.Math
open GCM_helpers
open Workarounds
open X64.GHash
open X64.GCTR
open X64.Machine_s
open X64.Memory
open X64.Stack_i
open X64.Vale.State
open X64.Vale.Decls
open X64.Vale.InsBasic
open X64.Vale.InsMem
open X64.Vale.InsStack
open X64.Vale.InsVector
open X64.Vale.InsAes
open X64.Vale.QuickCode
open X64.Vale.QuickCodes
open X64.GF128_Mul
open X64.AESCTR
open X64.Stack
open X64.CPU_Features_s
#endverbatim

#reset-options "--z3rlimit 30"

///////////////////////////
// GCM
///////////////////////////
procedure {:quick} gcm_one_pass_blocks(
    inline alg:algorithm,
    ghost in_b:buffer128,
    ghost out_b:buffer128,
    ghost block_offset:nat,
    ghost old_iv:quad32,
    ghost old_hash:quad32,
    ghost key:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128
    )
    lets in_ptr @= rax; out_ptr @= rbx; len @= rcx; icb @= xmm7; mask @= xmm8; hash @= xmm1; one @= xmm10; h @= xmm11;

    reads
        r8; in_ptr; out_ptr; len; mask; h; memTaint;

    modifies
        rdx; r9; r10; r12; xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; icb; one; mem; efl;

    requires
        // GCTR reqs
        buffers_disjoint128(in_b, out_b);
        buffers_disjoint128(keys_b, out_b);
        validSrcAddrsOffset128(mem,  in_ptr,  in_b, block_offset, len, memTaint, Secret);
        validDstAddrsOffset128(mem, out_ptr, out_b, block_offset, len, memTaint, Secret);
        in_ptr  + 16 * len < pow2_64;
        out_ptr + 16 * len < pow2_64;
        buffer_length(in_b) == buffer_length(out_b) /\ 256 * buffer_length(in_b) < pow2_32;
        mask == Mkfour(0x0C0D0E0F, 0x08090A0B, 0x04050607, 0x00010203);

        // AES reqs
        aesni_enabled;
        alg = AES_128 || alg = AES_256;
        is_aes_key_LE(alg, key);
        length(round_keys) == nr(alg) + 1;
        round_keys == key_to_round_keys_LE(alg, key);
        r8 == buffer_addr(keys_b, mem);
        validSrcAddrs128(mem, r8, keys_b, nr(alg) + 1, memTaint, Secret);
        buffer128_as_seq(mem, keys_b) == round_keys;


        // GCTR
        block_offset > 0 ==> gctr_partial(alg, block_offset, buffer128_as_seq(mem, in_b), buffer128_as_seq(mem, out_b), key, old_iv);
        icb == inc32(old_iv, block_offset);

        // GHash
        pclmulqdq_enabled;
        //block_offset > 0 ==> length(slice_work_around(buffer128_as_seq(mem, out_b), block_offset)) > 0 /\ 
        hash == ghash_incremental0(reverse_bytes_quad32(h), old_hash, slice_work_around(buffer128_as_seq(mem, out_b), block_offset));
    ensures
        modifies_buffer128(out_b, old(mem), mem);
        validSrcAddrsOffset128(mem, out_ptr, out_b, block_offset, len, memTaint, Secret);

        r9  ==  in_ptr + 16 * len;
        r10 == out_ptr + 16 * len;

        // GCTR
        gctr_partial(alg, block_offset + len, buffer128_as_seq(mem, in_b), buffer128_as_seq(mem, out_b), key, old_iv);
        icb == inc32(old(icb), old(len));

        // GHash
        len == 0 ==> hash == old(hash) /\ buffer128_as_seq(mem, out_b) == old(buffer128_as_seq(mem, out_b));
        len > 0 ==> length(slice_work_around(buffer128_as_seq(mem, out_b), block_offset + len)) > 0 /\ 
                    hash == ghash_incremental(reverse_bytes_quad32(h), old_hash, slice_work_around(buffer128_as_seq(mem, out_b), block_offset + len));
{
    Mov64(rdx, 0);
    Mov64(r9, in_ptr);
    Mov64(r10, out_ptr);

    // Initialize counter
    ZeroXmm(one);
    PinsrdImm(one, 1, 0, r12);

    while (rdx != len)
        invariant
            //////////////////// Basic indexing //////////////////////
            0 <= rdx <= len;
            r9 == in_ptr + 16 * rdx;
            r10 == out_ptr + 16 * rdx;
            icb == inc32(old_iv, block_offset + rdx);

            //////////////////// From requires //////////////////////
            // GCTR reqs
            buffers_disjoint128(in_b, out_b);
            buffers_disjoint128(keys_b, out_b);
            validSrcAddrsOffset128(mem,  in_ptr,  in_b, block_offset, len, memTaint, Secret);
            validDstAddrsOffset128(mem, out_ptr, out_b, block_offset, len, memTaint, Secret);
            in_ptr  + 16 * len < pow2_64;
            out_ptr + 16 * len < pow2_64;
            buffer_length(in_b) == buffer_length(out_b);

            // AES reqs
            aesni_enabled;
            alg = AES_128 || alg = AES_256;
            is_aes_key_LE(alg, key);
            length(round_keys) == nr(alg) + 1;
            round_keys == key_to_round_keys_LE(alg, key);
            r8 == buffer_addr(keys_b, mem);
            validSrcAddrs128(mem, r8, keys_b, nr(alg) + 1, memTaint, Secret);
            buffer128_as_seq(mem, keys_b) == round_keys;

            pclmulqdq_enabled;
            //////////////////// GCTR invariants //////////////////////
            mask == Mkfour(0x0C0D0E0F, 0x08090A0B, 0x04050607, 0x00010203);
            one == Mkfour(1, 0, 0, 0);

            //////////////////// Postcondition goals //////////////////////
            modifies_buffer128(out_b, old(mem), mem);
            gctr_partial(alg, block_offset + rdx, buffer128_as_seq(mem, in_b), buffer128_as_seq(mem, out_b), key, old_iv);

            rdx == 0 ==> hash == old(hash) /\ buffer128_as_seq(mem, out_b) == old(buffer128_as_seq(mem, out_b));
//            rdx > 0 ==> length(slice_work_around(buffer128_as_seq(mem, out_b), block_offset + rdx)) > 0 /\
            hash == ghash_incremental0(reverse_bytes_quad32(h), old_hash, slice_work_around(buffer128_as_seq(mem, out_b), block_offset + rdx));
        decreases
            len - rdx;
    {
        Mov128(xmm0, icb);
        Pshufb(xmm0, mask);
        AESEncryptBlock(alg, reverse_bytes_quad32(icb), key, round_keys, keys_b);
        reveal aes_encrypt_LE_def;

        Load128_buffer(xmm2, r9, 0, Secret, in_b, block_offset + rdx);
        Pxor(xmm2, xmm0);
        Store128_buffer(r10, xmm2, 0, Secret, out_b, block_offset + rdx);

        // Update our hash
        ghost var hash_input := xmm2;
        ghost var hash_prev := hash;
        compute_ghash_incremental_register();
        lemma_hash_append2(reverse_bytes_quad32(h), old_hash, hash_prev, hash, slice_work_around(buffer128_as_seq(mem, out_b), block_offset + rdx), hash_input);
        assert equal(slice_work_around(buffer128_as_seq(mem, out_b), block_offset + rdx + 1), append(slice_work_around(buffer128_as_seq(mem, out_b), block_offset + rdx), create(1, hash_input)));

        Add64(rdx, 1);
        Add64(r9, 16);
        Add64(r10, 16);
        Inc32(icb, one);
    }
}

procedure {:quick} gcm_one_pass_blocks_opt(
    inline alg:algorithm,
    ghost in_b:buffer128,
    ghost out_b:buffer128,
    ghost key:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128
    )
    lets in_ptr @= rax; out_ptr @= rbx; len @= rcx; icb @= xmm7; mask @= xmm8; hash @= xmm1; one @= xmm10; h @= xmm11;

    reads
        r8; h; memTaint;

    modifies
        in_ptr; out_ptr; len; rdx; rdi; r9; r10; r12; 
        xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; icb; mask; xmm9; one; 
        xmm12; xmm13; xmm14; xmm15;
        mem; efl;

    requires
        // GCTR reqs
        buffers_disjoint128(in_b, out_b);
        buffers_disjoint128(keys_b, out_b);
        validSrcAddrs128(mem, in_ptr, in_b, len, memTaint, Secret);
        validDstAddrs128(mem, out_ptr, out_b, len, memTaint, Secret);
        in_ptr  + 16 * len < pow2_64;
        out_ptr + 16 * len < pow2_64;
        buffer_length(in_b) == buffer_length(out_b) /\ 256 * buffer_length(in_b) < pow2_32;
        mask == Mkfour(0x0C0D0E0F, 0x08090A0B, 0x04050607, 0x00010203);

        // AES reqs
        aesni_enabled;
        alg = AES_128 || alg = AES_256;
        is_aes_key_LE(alg, key);
        length(round_keys) == nr(alg) + 1;
        round_keys == key_to_round_keys_LE(alg, key);
        r8 == buffer_addr(keys_b, mem);
        validSrcAddrs128(mem, r8, keys_b, nr(alg) + 1, memTaint, Secret);
        buffer128_as_seq(mem, keys_b) == round_keys;
            
        pclmulqdq_enabled;
    ensures
        modifies_buffer128(out_b, old(mem), mem);
        validSrcAddrs128(mem, old(out_ptr), out_b, old(len), memTaint, Secret);

        r9  ==  old(in_ptr) + 16 * old(len);
        r10 == old(out_ptr) + 16 * old(len);

        mask == Mkfour(0x0C0D0E0F, 0x08090A0B, 0x04050607, 0x00010203);

        // GCTR
        gctr_partial(alg, old(len), buffer128_as_seq(mem, in_b), buffer128_as_seq(mem, out_b), key, old(icb));
        icb == inc32(old(icb), old(len));

        // GHash
        old(len == 0) ==> hash == old(hash);
        old(len > 0) ==> length(buffer128_as_seq(mem, out_b)) > 0 /\ 
                         hash == ghash_incremental(reverse_bytes_quad32(h), old(hash), slice_work_around(buffer128_as_seq(mem, out_b), old(len)));
{
    // len == # of blocks, so we need to figure out how many sets of four blocks we have
    Mov64(rdx, len);
    Shr64(rdx, 2);
    And64(len, 3);
    lemma_poly_bits64();
    //assert rdx == old(len) / 4;
    //assert len == old(len) % 4;
    ghost var num_quad_blocks := rdx;
    assert old(len) == 4 * num_quad_blocks + len;

    if (rdx > 0) {
        // TODO: Align registers to avoid all of this pointer copying
        Mov64(r9, in_ptr);
        Mov64(r10, out_ptr);
        aes_counter_loop(alg, in_b, out_b, key, round_keys, keys_b);
        Mov64(in_ptr, r9);
        Mov64(out_ptr, r10);
    }

    gcm_one_pass_blocks(alg, in_b, out_b, 4*num_quad_blocks, old(icb), old(hash), key, round_keys, keys_b);
}

#reset-options "--z3rlimit 30"
procedure {:quick} gcm_one_pass(
    inline alg:algorithm,
    ghost in_b:buffer128,
    ghost out_b:buffer128,
    ghost key:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128
    )
    lets in_ptr @= rax; out_ptr @= rbx; num_bytes @= rcx; icb @= xmm7; mask @= xmm8; hash @= xmm1; one @= xmm10; h @= xmm11;

    reads
        r8; h; memTaint;

    modifies
        in_ptr; out_ptr; num_bytes; rdx; rdi; rsi; r9; r10; r12; xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; icb; mask; xmm9; one; xmm12; xmm13; xmm14; xmm15; mem; efl;

    requires
        // GCTR reqs
        buffers_disjoint128(in_b, out_b);
        buffers_disjoint128(keys_b, out_b);
        validSrcAddrs128(mem, in_ptr,  in_b,  bytes_to_quad_size(num_bytes), memTaint, Secret);
        validDstAddrs128(mem, out_ptr, out_b, bytes_to_quad_size(num_bytes), memTaint, Secret);
        in_ptr  + 16 * bytes_to_quad_size(num_bytes) < pow2_64;
        out_ptr + 16 * bytes_to_quad_size(num_bytes) < pow2_64;
        buffer_length(in_b)  == buffer_length(out_b);
        buffer_length(out_b) == bytes_to_quad_size(num_bytes);
        256 * buffer_length(in_b) < pow2_32;
        4096 * num_bytes < pow2_32;
        mask == Mkfour(0x0C0D0E0F, 0x08090A0B, 0x04050607, 0x00010203);

        // AES reqs
        aesni_enabled;
        alg = AES_128 || alg = AES_256;
        is_aes_key_LE(alg, key);
        length(round_keys) == nr(alg) + 1;
        round_keys == key_to_round_keys_LE(alg, key);
        r8 == buffer_addr(keys_b, mem);
        validSrcAddrs128(mem, r8, keys_b, nr(alg) + 1, memTaint, Secret);
        buffer128_as_seq(mem, keys_b) == round_keys;
            
        pclmulqdq_enabled;
    ensures
        modifies_buffer128(out_b, old(mem), mem);
        validSrcAddrs128(mem, old(out_ptr), out_b, bytes_to_quad_size(old(num_bytes)), memTaint, Secret);

        // GCTR
        let plain  := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem),  in_b)), old(num_bytes));
        let cipher := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(mem,      out_b)), old(num_bytes));
        cipher == gctr_encrypt_LE(old(icb), make_gctr_plain_LE(plain), alg, key);

        //icb == inc32(old(icb), bytes_to_quad_size(old(num_bytes)));
        icb.lo1 == old(icb.lo1);
        icb.hi2 == old(icb.hi2);
        icb.hi3 == old(icb.hi3);

        mask == Mkfour(0x0C0D0E0F, 0x08090A0B, 0x04050607, 0x00010203);

        // GHash
        old(num_bytes) == 0 ==> hash == old(hash);

        let cipher_padded_bytes := pad_to_128_bits(cipher);
        let cipher_padded_quads := le_bytes_to_seq_quad32(cipher_padded_bytes);
        old(num_bytes) > 0 ==> length(cipher_padded_quads) > 0 /\
            hash == ghash_incremental(reverse_bytes_quad32(h), old(hash), cipher_padded_quads);
{
    if (num_bytes > 0) {
        lemma_poly_bits64();
        Mov64(rsi, num_bytes);
        And64(rsi, 15);
        assert rsi == num_bytes % 16;
        Shr64(num_bytes, 4);
        ghost var num_blocks := old(num_bytes) / 16;
        assert rcx == num_blocks;

        gcm_one_pass_blocks_opt(alg, in_b, out_b, key, round_keys, keys_b);
        assert icb == inc32(old(icb), num_blocks);

        if (rsi == 0) {
            gctr_bytes_no_extra(alg, old(icb), in_b, out_b, key, round_keys, keys_b, old(in_ptr), old(out_ptr), old(num_bytes));
            ghash_incremental_bytes_no_extra(out_b, old(hash), old(out_ptr), old(num_bytes), hash, reverse_bytes_quad32(h));
            bytes_to_quad_size_no_extra_bytes(old(num_bytes));
            //assert icb == inc32(old(icb), bytes_to_quad_size(old(num_bytes)));

            assert buffer128_as_seq(old(mem),  in_b) == buffer128_as_seq(mem,  in_b);       // OBSERVE
        } else {
            // TODO: Should update gcm_one_pass_blocks and gctr_* to give their results in terms of old(mem) and in_b, instead of mem
//            assert buffer128_as_seq(old(mem),  in_b) == buffer128_as_seq(mem,  in_b);       // OBSERVE
            Mov128(xmm3, hash); // Save hash b/c gctr_bytes_extra will clobber it
            gctr_bytes_extra(alg, old(icb), in_b, out_b, key, round_keys, keys_b, old(in_ptr), old(out_ptr), old(num_bytes));
            Mov64(rax, rsi);    // ghash_incremental_bytes_extra expects num_bytes % 16 in rax
            Mov64(r9, r10);     // ghash_incremental_bytes_extra expects old(out_ptr) + 16 * num_blocks in r9
            Mov128(hash, xmm3);
            // TODO: Can optimize here by skipping the memory load in ghash_incremental_bytes_extra
            //       and reading from xmm1 directly.  It's probably still in cache though
            ghash_incremental_bytes_extra(out_b, old(out_ptr), old(hash), old(num_bytes));
//            assert buffer128_as_seq(old(mem),  in_b) == buffer128_as_seq(mem,  in_b);       // OBSERVE
        }
    }

    // Handle the else case:
    ghost var plain  := buffer128_as_seq(old(mem),  in_b);
    ghost var cipher := buffer128_as_seq(mem,      out_b);
    gctr_encrypt_empty(old(icb), plain, cipher, alg, key);

}

#reset-options "--z3rlimit 30"
procedure {:quick} gcm_core_part1(
    inline alg:algorithm,
    ghost iv_BE:quad32,
    ghost plain_b:buffer128,
    ghost auth_b:buffer128,
    ghost out_b:buffer128,
    ghost key:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128
    ) returns (
    ghost h:quad32,
    ghost y_0:quad32,
    ghost y_auth:quad32,
    ghost y_cipher:quad32
    )

    lets plain_ptr @= r14; out_ptr @= rbx; keys_ptr @= r8; auth_ptr @= rax;
    plain_num_bytes @= r13; auth_num_bytes @= r11; mask @= xmm8;
    iv @= xmm7;

    reads
        plain_ptr; keys_ptr; plain_num_bytes; auth_num_bytes; memTaint;

    modifies
        rax; out_ptr; rcx; rdx; rdi; rsi; r9; r10; r12; xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; iv; mask; xmm9; xmm10; xmm11; xmm12; xmm13; xmm14; xmm15;
        mem; efl;


    requires
        // GCM reqs
        iv == reverse_bytes_quad32(iv_BE);
        buffers_disjoint128(plain_b, out_b);
        buffers_disjoint128(auth_b, out_b);
        buffers_disjoint128(keys_b, out_b);
        validSrcAddrs128(mem, plain_ptr, plain_b, bytes_to_quad_size(plain_num_bytes), memTaint, Secret);
        validSrcAddrs128(mem, auth_ptr,  auth_b,  bytes_to_quad_size(auth_num_bytes), memTaint, Secret);
        validDstAddrs128(mem, out_ptr,   out_b,   bytes_to_quad_size(plain_num_bytes), memTaint, Secret);
        plain_ptr + 16 * bytes_to_quad_size(plain_num_bytes) < pow2_64;
        auth_ptr  + 16 * bytes_to_quad_size(auth_num_bytes)  < pow2_64;
        out_ptr   + 16 * bytes_to_quad_size(plain_num_bytes) < pow2_64;
        buffer_length(plain_b) == buffer_length(out_b);
        buffer_length(out_b) == bytes_to_quad_size(plain_num_bytes);
        buffer_length(auth_b) == bytes_to_quad_size(auth_num_bytes);
        256 * buffer_length(plain_b) < pow2_32;
        4096 * plain_num_bytes < pow2_32;
        4096 * auth_num_bytes < pow2_32;

        // To simplify length calculations, restrict auth and plain length further
        256 * bytes_to_quad_size(auth_num_bytes)  < pow2_32;
        256 * bytes_to_quad_size(plain_num_bytes) < pow2_32;

        // AES reqs
        aesni_enabled;
        alg = AES_128 || alg = AES_256;
        is_aes_key_LE(alg, key);
        length(round_keys) == nr(alg) + 1;
        round_keys == key_to_round_keys_LE(alg, key);
        validSrcAddrs128(mem, keys_ptr, keys_b, nr(alg) + 1, memTaint, Secret);
        buffer128_as_seq(mem, keys_b) == round_keys;
            
        pclmulqdq_enabled;
    ensures
        modifies_buffer128(out_b, old(mem), mem);
        validSrcAddrs128(mem, old(out_ptr), out_b, old(bytes_to_quad_size(plain_num_bytes)), memTaint, Secret);

        // Main result
        let auth   := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), auth_b)),  old(auth_num_bytes));
        let plain  := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), plain_b)), old(plain_num_bytes));
        let cipher := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(mem,      out_b)),   old(plain_num_bytes));

//        // TODO: First two clauses work around Vale's type limitations
        4096 * length(plain) < pow2_32 /\
        4096 * length(auth) < pow2_32 /\
        cipher == gcm_encrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), be_quad32_to_bytes(iv_BE), plain, auth)._1;

        // Intermediate hash state needed for the next step
        let auth_padded_bytes := pad_to_128_bits(auth);
        let auth_padded_quads := le_bytes_to_seq_quad32(auth_padded_bytes);

        let cipher_padded_bytes := pad_to_128_bits(cipher);
        let cipher_padded_quads := le_bytes_to_seq_quad32(cipher_padded_bytes);

        y_0 == Mkfour(0, 0, 0, 0);
        y_auth == ghash_incremental0(reverse_bytes_quad32(h), y_0, auth_padded_quads);
        y_cipher == ghash_incremental0(reverse_bytes_quad32(h), y_auth, cipher_padded_quads);
        xmm1 == y_cipher;

        // Intermediate IV state
        iv == Mkfour(iv.lo0, iv_BE.lo1, iv_BE.hi2, iv_BE.hi3);

        // Other intermediate facts
        mask == Mkfour(0x0C0D0E0F, 0x08090A0B, 0x04050607, 0x00010203);
        xmm11 == h;
        h == reverse_bytes_quad32(aes_encrypt_LE(alg, key, y_0));
{
    InitPshufbMask(xmm8, r12);

    // let h = aes_encrypt_LE alg key (Mkfour 0 0 0 0) in
    ZeroXmm(xmm0);
    AESEncryptBlock(alg, xmm0, key, round_keys, keys_b); // h = xmm0 = aes_encrypt_LE alg key (Mkfour 0 0 0 0) in
    Pshufb(xmm0, xmm8);   // reverse h, since the hashing code assumes the reversal has already happened
    h := xmm0;
    Mov128(xmm11, xmm0);     // Save a copy of h

    // let j0_BE = Mkfour 1 iv_BE.lo1 iv_BE.hi2 iv_BE.hi3 in
    // (inc32 j0 1)
    Pshufb(iv, xmm8); // to big endian
    PinsrdImm(iv, 2, 0, r12);
    // assert iv == inc32(Mkfour(1, iv_BE.lo1, iv_BE.hi2, iv_BE.hi3), 1);

    // Compute the hashes incrementally, starting with auth data
    //Mov64(rax, auth_ptr);
    //Mov64(rcx, auth_num_bytes);
    ZeroXmm(xmm1);
    y_0 := Mkfour(0, 0, 0, 0);
    // assert xmm1 == y_0;
    ghash_incremental_bytes(auth_b);
    y_auth := xmm1;

//    ghost var auth_bytes := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(mem, auth_b)), auth_num_bytes);
//    ghost var auth_padded_bytes := pad_to_128_bits(auth_bytes);
//    ghost var auth_padded_quads := le_bytes_to_seq_quad32(auth_padded_bytes);
    ghost var plain  := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), plain_b)), old(plain_num_bytes));
    ghost var auth   := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), auth_b)),  old(auth_num_bytes));
//
//    assert y_0 == Mkfour(0,0,0,0);
//    assert y_auth   == ghash_incremental0(h, y_0, auth_padded_quads);
//
    // let c = gctr_encrypt_LE (inc32 j0 1) p alg key in
    Mov64(rax, plain_ptr);
    //Mov64(rbx, out_ptr);
    Mov64(rcx, plain_num_bytes);
    ghost var icb_enc := iv;

    assert icb_enc == inc32 (Mkfour(1,iv_BE.lo1,iv_BE.hi2,iv_BE.hi3), 1);     // Passes -- REVIEW: Seems to be necessary for it to pass at the end of the procedure; unclear why that could possibly be the case
    gcm_one_pass(alg, plain_b, out_b, key, round_keys, keys_b);
    y_cipher := xmm1;
    ghost var cipher := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(mem, out_b)), old(plain_num_bytes));
    gcm_encrypt_LE_fst_helper(icb_enc, iv_BE, plain, auth, cipher, alg, key);
    reveal_le_bytes_to_seq_quad32();
}

#reset-options "--z3rlimit 10"
procedure {:quick} gcm_make_length_quad()
    lets plain_num_bytes @= r13; auth_num_bytes @= r11; mask @= xmm8;
    reads plain_num_bytes; auth_num_bytes; mask;

    modifies xmm2; rax; efl;
    requires
        mask == Mkfour(0x0C0D0E0F, 0x08090A0B, 0x04050607, 0x00010203);
        plain_num_bytes * 8 < pow2_32;
        auth_num_bytes * 8 < pow2_32;
    ensures
        old(plain_num_bytes) * 8 < pow2_32;
        old(auth_num_bytes) * 8 < pow2_32;
        xmm2 == reverse_bytes_quad32(Mkfour(#nat32(8 * old(plain_num_bytes)), 0, #nat32(8 * old(auth_num_bytes)), 0));
{
    // Prepare length fields
    ZeroXmm(xmm2);
    Mov64(rax, plain_num_bytes);
    IMul64(rax, 8);
    Pinsrd(xmm2, rax, 0);
    Mov64(rax, auth_num_bytes);
    IMul64(rax, 8);
    Pinsrd(xmm2, rax, 2);
    // assert xmm2 == Mkfour(#nat32(8 * plain_num_bytes), 0, #nat32(8 * auth_num_bytes), 0);     // Passes when ghost vars above are removed

    Pshufb(xmm2, xmm8);
}

#reset-options "--z3rlimit 30"
procedure {:quick} gcm_core(
    inline alg:algorithm,
    ghost iv_BE:quad32,
    ghost plain_b:buffer128,
    ghost auth_b:buffer128,
    ghost out_b:buffer128,
    ghost key:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128
    )

    lets plain_ptr @= r14; out_ptr @= rbx; keys_ptr @= r8; auth_ptr @= rax;
    plain_num_bytes @= r13; auth_num_bytes @= r11; mask @= xmm8;
    iv @= xmm7;

    reads
        plain_ptr; keys_ptr; plain_num_bytes; auth_num_bytes; memTaint;

    modifies
        rax; out_ptr; rcx; rdx; rdi; rsi; r9; r10; r12; xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; iv; mask; xmm9; xmm10; xmm11; xmm12; xmm13; xmm14; xmm15;
        mem; efl;


    requires
        // GCM reqs
        iv == reverse_bytes_quad32(iv_BE);
        buffers_disjoint128(plain_b, out_b);
        buffers_disjoint128(auth_b, out_b);
        buffers_disjoint128(keys_b, out_b);
        validSrcAddrs128(mem, plain_ptr, plain_b, bytes_to_quad_size(plain_num_bytes), memTaint, Secret);
        validSrcAddrs128(mem, auth_ptr,  auth_b,  bytes_to_quad_size(auth_num_bytes), memTaint, Secret);
        validDstAddrs128(mem, out_ptr,   out_b,   bytes_to_quad_size(plain_num_bytes), memTaint, Secret);
        plain_ptr + 16 * bytes_to_quad_size(plain_num_bytes) < pow2_64;
        auth_ptr  + 16 * bytes_to_quad_size(auth_num_bytes)  < pow2_64;
        out_ptr   + 16 * bytes_to_quad_size(plain_num_bytes) < pow2_64;
        buffer_length(plain_b) == buffer_length(out_b);
        buffer_length(out_b) == bytes_to_quad_size(plain_num_bytes);
        buffer_length(auth_b) == bytes_to_quad_size(auth_num_bytes);
        256 * buffer_length(plain_b) < pow2_32;
        4096 * plain_num_bytes < pow2_32;
        4096 * auth_num_bytes < pow2_32;

        // To simplify length calculations, restrict auth and plain length further
        256 * bytes_to_quad_size(auth_num_bytes)  < pow2_32;
        256 * bytes_to_quad_size(plain_num_bytes) < pow2_32;

        // AES reqs
        aesni_enabled;
        alg = AES_128 || alg = AES_256;
        is_aes_key_LE(alg, key);
        length(round_keys) == nr(alg) + 1;
        round_keys == key_to_round_keys_LE(alg, key);
        validSrcAddrs128(mem, keys_ptr, keys_b, nr(alg) + 1, memTaint, Secret);
        buffer128_as_seq(mem, keys_b) == round_keys;
            
        pclmulqdq_enabled;
    ensures
        modifies_buffer128(out_b, old(mem), mem);
        validSrcAddrs128(mem, old(out_ptr), out_b, old(bytes_to_quad_size(plain_num_bytes)), memTaint, Secret);

        let auth   := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), auth_b)),  old(auth_num_bytes));
        let plain  := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), plain_b)), old(plain_num_bytes));
        let cipher := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(mem,      out_b)),   old(plain_num_bytes));

//        // TODO: First two clauses work around Vale's type limitations
        4096 * length(plain) < pow2_32 /\
        4096 * length(auth) < pow2_32 /\
        cipher == gcm_encrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), be_quad32_to_bytes(iv_BE), plain, auth)._1 /\
        le_quad32_to_bytes(xmm1) == gcm_encrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), be_quad32_to_bytes(iv_BE), plain, auth)._2;
{
    (ghost var h), (ghost var y_0), (ghost var y_auth), (ghost var y_cipher) := gcm_core_part1(alg, iv_BE, plain_b, auth_b, out_b, key, round_keys, keys_b);

    gcm_make_length_quad();
    ghost var length_quad32 := xmm2;

    compute_ghash_incremental_register();
    ghost var y_final := xmm1;

    // Invoke lemma showing that incremental hashing works
    ghost var auth_bytes := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), auth_b)), old(auth_num_bytes));
    ghost var auth_padded_quads := le_bytes_to_seq_quad32(pad_to_128_bits(auth_bytes));

    ghost var cipher := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(mem, out_b)), old(plain_num_bytes));
    ghost var cipher_padded_quads := le_bytes_to_seq_quad32(pad_to_128_bits(cipher));
    lemma_hash_append3(reverse_bytes_quad32(h), y_0, y_auth, y_cipher, y_final,
                       auth_padded_quads, //buffer128_as_seq(mem, auth_b),
                       cipher_padded_quads, //buffer128_as_seq(mem, out_b),
                       create(1, length_quad32));


    PinsrdImm(iv, 1, 0, r12);   // Reconstruct j0 (this is all we need, since gctr_core says it only changes iv.lo0)
//    assert iv == iv_BE.(lo0 := 1);

    // Encrypt the hash value with gctr_register; result goes in xmm1
    gctr_register(alg, key, round_keys, keys_b); // Encrypt using j0 and xmm0 = hash_value

    ghost var plain  := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), plain_b)), old(plain_num_bytes));

//    assert 4096 * length(plain) < pow2_32;
//    assert 4096 * length(auth_bytes) < pow2_32;
//    assert 4096 * length(plain) < pow2_32 /\ 4096 * length(auth_bytes) < pow2_32 /\ cipher == gcm_encrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), be_quad32_to_bytes(iv_BE), plain, auth_bytes)._1;
//    assert length_quad32 == reverse_bytes_quad32(Mkfour(#nat32(8 * length(plain)), 0, #nat32(8 * length(auth_bytes)), 0));
//    //assert h == aes_encrypt_LE(alg, key, Mkfour(0,0,0,0));
//    assert y_final == ghash_LE(reverse_bytes_quad32(h), append(auth_padded_quads, append(cipher_padded_quads, create(1, length_quad32))));
    le_seq_quad32_to_bytes_of_singleton(xmm1);
//    assert le_quad32_to_bytes(xmm1) == gctr_encrypt_LE(Mkfour(1, iv_BE.lo1, iv_BE.hi2, iv_BE.hi3), le_quad32_to_bytes(y_final), alg, key);

//    assert length_quad32 == reverse_bytes_quad32(Mkfour(#nat32(8 * old(plain_num_bytes)), 0, #nat32(8 * old(auth_num_bytes)), 0));

    gcm_encrypt_LE_snd_helper(iv_BE, length_quad32, y_final, xmm1, plain, auth_bytes, cipher, alg, key);
    //be_bytes_to_quad32_to_bytes(iv_BE);
}


#reset-options "--z3rlimit 30"
procedure {:quick} gcm_encrypt_stdcall_inner(
    inline alg:algorithm,
    ghost args_b:buffer64,
    ghost iv_BE:quad32,

    ghost plain_b:buffer128,
    ghost auth_b:buffer128,
    ghost iv_b:buffer128,
    ghost out_b:buffer128,
    ghost tag_b:buffer128,

    ghost key:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128
    )
    reads memTaint;
    modifies
        rax; rbx; rcx; rdx; rdi; rsi; r8; r9; r10; r11; r12; r13; r14; r15; xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; xmm7; xmm8; xmm9; xmm10; xmm11; xmm12; xmm13; xmm14; xmm15;
        mem; efl;
    lets
        args_ptr := r9;

        plain_ptr         := buffer64_read(args_b, 0, mem);
        plain_num_bytes   := buffer64_read(args_b, 1, mem);
        auth_ptr          := buffer64_read(args_b, 2, mem);
        auth_num_bytes    := buffer64_read(args_b, 3, mem);
        iv_ptr            := buffer64_read(args_b, 4, mem);
        expanded_key_ptr  := buffer64_read(args_b, 5, mem);
        out_ptr           := buffer64_read(args_b, 6, mem);
        tag_ptr           := buffer64_read(args_b, 7, mem);

    requires
        validSrcAddrs64(mem, args_ptr, args_b, 8, memTaint, Public);

        buffers_disjoint128(plain_b, out_b);
        buffers_disjoint128(auth_b, out_b);
        buffers_disjoint128(keys_b, out_b);
        buffers_disjoint128(out_b, tag_b);

        validSrcAddrs128(mem, plain_ptr, plain_b, bytes_to_quad_size(plain_num_bytes), memTaint, Secret);
        validSrcAddrs128(mem, auth_ptr, auth_b, bytes_to_quad_size(auth_num_bytes), memTaint, Secret);
        validSrcAddrs128(mem, iv_ptr, iv_b, 1, memTaint, Secret);
        validDstAddrs128(mem, out_ptr, out_b, bytes_to_quad_size(plain_num_bytes), memTaint, Secret);
        validDstAddrs128(mem, tag_ptr, tag_b, 1, memTaint, Secret);

        plain_ptr + 16 * bytes_to_quad_size(plain_num_bytes) < pow2_64;
        auth_ptr  + 16 * bytes_to_quad_size(auth_num_bytes)  < pow2_64;
        out_ptr   + 16 * bytes_to_quad_size(plain_num_bytes) < pow2_64;
        buffer_length(plain_b) == buffer_length(out_b);
        buffer_length(out_b) == bytes_to_quad_size(plain_num_bytes);
        buffer_length(auth_b) == bytes_to_quad_size(auth_num_bytes);
        256 * buffer_length(plain_b) < pow2_32;
        4096 * plain_num_bytes < pow2_32;
        4096 * auth_num_bytes < pow2_32;

        iv_BE == reverse_bytes_quad32(buffer128_read(iv_b, 0, mem));

        // To simplify length calculations, restrict auth and plain length further
        256 * bytes_to_quad_size(auth_num_bytes)  < pow2_32;
        256 * bytes_to_quad_size(plain_num_bytes) < pow2_32;

        // AES reqs
        aesni_enabled;
        alg = AES_128 || alg = AES_256;
        is_aes_key_LE(alg, key);
        length(round_keys) == nr(alg) + 1;
        round_keys == key_to_round_keys_LE(alg, key);
        validSrcAddrs128(mem, expanded_key_ptr, keys_b, nr(alg) + 1, memTaint, Secret);
        buffer128_as_seq(mem, keys_b) == round_keys;
            
        pclmulqdq_enabled;
    ensures
        modifies_buffer128_2(out_b, tag_b, old(mem), mem);

        validSrcAddrs128(mem, old(out_ptr), out_b, old(bytes_to_quad_size(plain_num_bytes)), memTaint, Secret);
        validSrcAddrs128(mem, old(tag_ptr), tag_b, 1, memTaint, Secret);

        let auth   := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), auth_b)),  old(auth_num_bytes));
        let plain  := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), plain_b)), old(plain_num_bytes));
        let cipher := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(mem,      out_b)),   old(plain_num_bytes));

//        // TODO: First two clauses work around Vale's type limitations
        4096 * length(plain) < pow2_32 /\
        4096 * length(auth) < pow2_32 /\
        cipher == gcm_encrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), be_quad32_to_bytes(iv_BE), plain, auth)._1 /\
        le_quad32_to_bytes(buffer128_read(tag_b, 0, mem)) == gcm_encrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), be_quad32_to_bytes(iv_BE), plain, auth)._2;
{
    Load64_buffer(r14, r9,  0, Public, args_b, 0);
    Load64_buffer(r13, r9,  8, Public, args_b, 1);
    Load64_buffer(rax, r9, 16, Public, args_b, 2);
    Load64_buffer(r11, r9, 24, Public, args_b, 3);
    Load64_buffer(r10, r9, 32, Public, args_b, 4);
    Load64_buffer(r8,  r9, 40, Public, args_b, 5);
    Load64_buffer(rbx, r9, 48, Public, args_b, 6);
    Load64_buffer(r15, r9, 56, Public, args_b, 7);

    // Load the IV into its XMM register
    Load128_buffer(xmm7, r10, 0, Secret, iv_b, 0);

    gcm_core(alg, iv_BE, plain_b, auth_b, out_b, key, round_keys, keys_b);

    // Auth tag is still in xmm1, so save it to memory
    Store128_buffer(r15, xmm1, 0, Secret, tag_b, 0);
}

#reset-options "--z3rlimit 200"
procedure {:quick} gcm_encrypt_stdcall(
    inline win:bool,
    inline alg:algorithm,
    ghost args_b:buffer64,
    ghost iv_BE:quad32,

    ghost plain_b:buffer128,
    ghost auth_b:buffer128,
    ghost iv_b:buffer128,
    ghost out_b:buffer128,
    ghost tag_b:buffer128,

    ghost key:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128
    )
    reads memTaint;
    modifies
        rax; rbx; rcx; rdx; rdi; rsi; rsp; rbp; r8; r9; r10; r11; r12; r13; r14; r15; 
        xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; xmm7; xmm8; xmm9; xmm10; xmm11; xmm12; xmm13; xmm14; xmm15;
        mem; efl; stack;
    lets
        args_ptr := if win then rcx else rdi;

        plain_ptr         := buffer64_read(args_b, 0, mem);
        plain_num_bytes   := buffer64_read(args_b, 1, mem);
        auth_ptr          := buffer64_read(args_b, 2, mem);
        auth_num_bytes    := buffer64_read(args_b, 3, mem);
        iv_ptr            := buffer64_read(args_b, 4, mem);
        expanded_key_ptr  := buffer64_read(args_b, 5, mem);
        out_ptr           := buffer64_read(args_b, 6, mem);
        tag_ptr           := buffer64_read(args_b, 7, mem);

    requires
        rsp == init_rsp(stack);
        validSrcAddrs64(mem, args_ptr, args_b, 8, memTaint, Public);

        buffers_disjoint128(plain_b, out_b);
        buffers_disjoint128(auth_b, out_b);
        buffers_disjoint128(keys_b, out_b);
        buffers_disjoint128(out_b, tag_b);


        validSrcAddrs128(mem, plain_ptr, plain_b, bytes_to_quad_size(plain_num_bytes), memTaint, Secret);
        validSrcAddrs128(mem, auth_ptr, auth_b, bytes_to_quad_size(auth_num_bytes), memTaint, Secret);
        validSrcAddrs128(mem, iv_ptr, iv_b, 1, memTaint, Secret);
        validDstAddrs128(mem, out_ptr, out_b, bytes_to_quad_size(plain_num_bytes), memTaint, Secret);
        validDstAddrs128(mem, tag_ptr, tag_b, 1, memTaint, Secret);

        plain_ptr + 16 * bytes_to_quad_size(plain_num_bytes) < pow2_64;
        auth_ptr  + 16 * bytes_to_quad_size(auth_num_bytes)  < pow2_64;
        out_ptr   + 16 * bytes_to_quad_size(plain_num_bytes) < pow2_64;
        buffer_length(plain_b) == buffer_length(out_b);
        buffer_length(out_b) == bytes_to_quad_size(plain_num_bytes);
        buffer_length(auth_b) == bytes_to_quad_size(auth_num_bytes);
        256 * buffer_length(plain_b) < pow2_32;
        4096 * plain_num_bytes < pow2_32;
        4096 * auth_num_bytes < pow2_32;

        iv_BE == reverse_bytes_quad32(buffer128_read(iv_b, 0, mem));

        // To simplify length calculations, restrict auth and plain length further
        256 * bytes_to_quad_size(auth_num_bytes)  < pow2_32;
        256 * bytes_to_quad_size(plain_num_bytes) < pow2_32;

        // AES reqs
        aesni_enabled;
        alg = AES_128 || alg = AES_256;
        is_aes_key_LE(alg, key);
        length(round_keys) == nr(alg) + 1;
        round_keys == key_to_round_keys_LE(alg, key);
        validSrcAddrs128(mem, expanded_key_ptr, keys_b, nr(alg) + 1, memTaint, Secret);
        buffer128_as_seq(mem, keys_b) == round_keys;
            
        pclmulqdq_enabled;
    ensures
        modifies_mem(loc_union(loc_buffer(out_b), loc_buffer(tag_b)), old(mem), mem);

        validSrcAddrs128(mem, old(out_ptr), out_b, old(bytes_to_quad_size(plain_num_bytes)), memTaint, Secret);
        validSrcAddrs128(mem, old(tag_ptr), tag_b, 1, memTaint, Secret);

        let auth   := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), auth_b)),  old(auth_num_bytes));
        let plain  := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), plain_b)), old(plain_num_bytes));
        let cipher := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(mem,      out_b)),   old(plain_num_bytes));

//        // TODO: First two clauses work around Vale's type limitations
        4096 * length(plain) < pow2_32 /\
        4096 * length(auth) < pow2_32 /\
        cipher == gcm_encrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), be_quad32_to_bytes(iv_BE), plain, auth)._1 /\
        le_quad32_to_bytes(buffer128_read(tag_b, 0, mem)) == gcm_encrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), be_quad32_to_bytes(iv_BE), plain, auth)._2;

        // Calling convention for caller/callee saved registers
        rsp == old(rsp);

        // Windows:
        win ==> rbx == old(rbx);
        win ==> rbp == old(rbp);
        win ==> rdi == old(rdi);
        win ==> rsi == old(rsi);
        win ==> r12 == old(r12);
        win ==> r13 == old(r13);
        win ==> r14 == old(r14);
        win ==> r15 == old(r15);

        win ==> xmm6  == old(xmm6);
        win ==> xmm7  == old(xmm7);
        win ==> xmm8  == old(xmm8);
        win ==> xmm10 == old(xmm10);
        win ==> xmm11 == old(xmm11);

        // Linux:
        !win ==> rbx == old(rbx);
        !win ==> rbp == old(rbp);
        !win ==> r12 == old(r12);
        !win ==> r13 == old(r13);
        !win ==> r14 == old(r14);
        !win ==> r15 == old(r15);
{
    // Shuffle the incoming pointer around
    inline if (win) {
        Mov64(r9, rcx);
    } else {
        Mov64(r9, rdi);
    }

    Push(r15);
    Push(r14);
    Push(r13);
    Push(r12);
    Push(rsi);
    Push(rdi);
    Push(rbp);
    Push(rbx);

    inline if (win) {
        PushXmm(xmm15, rax);
        PushXmm(xmm14, rax);
        PushXmm(xmm13, rax);
        PushXmm(xmm12, rax);
        PushXmm(xmm11, rax);
        PushXmm(xmm10, rax);
        PushXmm(xmm9,  rax);
        PushXmm(xmm8,  rax);
        PushXmm(xmm7,  rax);
        PushXmm(xmm6,  rax);
    }

    gcm_encrypt_stdcall_inner(alg, args_b, iv_BE, plain_b, auth_b, iv_b, out_b, tag_b, key, round_keys, keys_b);

    inline if (win) {
        PopXmm(xmm6,  rax, old(xmm6));
        PopXmm(xmm7,  rax, old(xmm7));
        PopXmm(xmm8,  rax, old(xmm8));
        PopXmm(xmm9,  rax, old(xmm9));
        PopXmm(xmm10, rax, old(xmm10));
        PopXmm(xmm11, rax, old(xmm11));
        PopXmm(xmm12, rax, old(xmm12));
        PopXmm(xmm13, rax, old(xmm13));
        PopXmm(xmm14, rax, old(xmm14));
        PopXmm(xmm15, rax, old(xmm15));
    }

    Pop(rbx);
    Pop(rbp);
    Pop(rdi);
    Pop(rsi);
    Pop(r12);
    Pop(r13);
    Pop(r14);
    Pop(r15);
}


// Take arguments in registers and the stack, instead of via an in-memory struct
procedure {:quick}{:public}{:exportSpecs} gcm_encrypt2_stdcall(
    inline win:bool,
    inline alg:algorithm,

    ghost plain_b:buffer128,
    ghost plain_num_bytes:nat64,
    ghost auth_b:buffer128,
    ghost auth_num_bytes:nat64,
    ghost iv_b:buffer128,
    ghost keys_b:buffer128,    
    ghost out_b:buffer128,
    ghost tag_b:buffer128,

    ghost key:seq(nat32)
    )
    reads memTaint;
    modifies
        rax; rbx; rcx; rdx; rdi; rsi; rsp; rbp; r8; r9; r10; r11; r12; r13; r14; r15; 
        xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; xmm7; xmm8; xmm9; xmm10; xmm11; xmm12; xmm13; xmm14; xmm15;
        mem; efl; stack;
    lets
        plain_ptr        := if win then rcx else rdi;
        auth_ptr         := if win then r8  else rdx;
        iv_ptr           := if win then load_stack64(rsp + 32 + 8 + 0, stack) else r8;
        expanded_key_ptr := if win then load_stack64(rsp + 32 + 8 + 8, stack) else r9;
        out_ptr          := if win then load_stack64(rsp + 32 + 8 + 16, stack) else load_stack64(rsp + 8 + 0, stack);
        tag_ptr          := if win then load_stack64(rsp + 32 + 8 + 24, stack) else load_stack64(rsp + 8 + 8, stack);

    requires
        buffers_disjoint128(plain_b, out_b);
        buffers_disjoint128(auth_b, out_b);
        buffers_disjoint128(keys_b, out_b);
        buffers_disjoint128(out_b, tag_b);

        rsp == init_rsp(stack);
        win ==> valid_src_stack64(rsp + 32 + 8 + 0, stack);
        win ==> valid_src_stack64(rsp + 32 + 8 + 8, stack);
        win ==> valid_src_stack64(rsp + 32 + 8 + 16, stack);
        win ==> valid_src_stack64(rsp + 32 + 8 + 24, stack);
        !win ==> valid_src_stack64(rsp + 8 + 0, stack);
        !win ==> valid_src_stack64(rsp + 8 + 8, stack);        

        plain_num_bytes == (if win then rdx else rsi);
        auth_num_bytes == (if win then r9 else rcx);
        validSrcAddrs128(mem, plain_ptr, plain_b, bytes_to_quad_size(plain_num_bytes), memTaint, Secret);
        validSrcAddrs128(mem, auth_ptr, auth_b, bytes_to_quad_size(auth_num_bytes), memTaint, Secret);
        validSrcAddrs128(mem, iv_ptr, iv_b, 1, memTaint, Secret);
        validDstAddrs128(mem, out_ptr, out_b, bytes_to_quad_size(plain_num_bytes), memTaint, Secret);
        validDstAddrs128(mem, tag_ptr, tag_b, 1, memTaint, Secret);

        plain_ptr + 16 * bytes_to_quad_size(plain_num_bytes) < pow2_64;
        auth_ptr  + 16 * bytes_to_quad_size(auth_num_bytes)  < pow2_64;
        out_ptr   + 16 * bytes_to_quad_size(plain_num_bytes) < pow2_64;
        buffer_length(plain_b) == buffer_length(out_b);
        buffer_length(out_b) == bytes_to_quad_size(plain_num_bytes);
        buffer_length(auth_b) == bytes_to_quad_size(auth_num_bytes);
        256 * buffer_length(plain_b) < pow2_32;
        4096 * plain_num_bytes < pow2_32;
        4096 * auth_num_bytes < pow2_32;

        // To simplify length calculations, restrict auth and plain length further
        256 * bytes_to_quad_size(auth_num_bytes)  < pow2_32;
        256 * bytes_to_quad_size(plain_num_bytes) < pow2_32;

        // AES reqs
        aesni_enabled;
        alg = AES_128 || alg = AES_256;
        is_aes_key_LE(alg, key);
        buffer128_as_seq(mem, keys_b) == key_to_round_keys_LE(alg, key);
        validSrcAddrs128(mem, expanded_key_ptr, keys_b, nr(alg) + 1, memTaint, Secret);

        pclmulqdq_enabled;
    ensures
        modifies_mem(loc_union(loc_buffer(out_b), loc_buffer(tag_b)), old(mem), mem);

        validSrcAddrs128(mem, old(out_ptr), out_b, old(bytes_to_quad_size(plain_num_bytes)), memTaint, Secret);
        validSrcAddrs128(mem, old(tag_ptr), tag_b, 1, memTaint, Secret);

        let auth   := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), auth_b)),  old(auth_num_bytes));
        let plain  := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), plain_b)), old(plain_num_bytes));
        let cipher := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(mem,      out_b)),   old(plain_num_bytes));

//        // TODO: First two clauses work around Vale's type limitations
        4096 * length(plain) < pow2_32 /\
        4096 * length(auth) < pow2_32 /\
        cipher == gcm_encrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), be_quad32_to_bytes(reverse_bytes_quad32(buffer128_read(iv_b, 0, old(mem)))), plain, auth)._1 /\
        le_quad32_to_bytes(buffer128_read(tag_b, 0, mem)) == gcm_encrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), be_quad32_to_bytes(reverse_bytes_quad32(buffer128_read(iv_b, 0, old(mem)))), plain, auth)._2;

        // Calling convention for caller/callee saved registers
        rsp == old(rsp);

        // Windows:
        win ==> rbx == old(rbx);
        win ==> rbp == old(rbp);
        win ==> rdi == old(rdi);
        win ==> rsi == old(rsi);
        win ==> r12 == old(r12);
        win ==> r13 == old(r13);
        win ==> r14 == old(r14);
        win ==> r15 == old(r15);

        win ==> xmm6  == old(xmm6);
        win ==> xmm7  == old(xmm7);
        win ==> xmm8  == old(xmm8);
        win ==> xmm9  == old(xmm9);
        win ==> xmm10 == old(xmm10);
        win ==> xmm11 == old(xmm11);
        win ==> xmm12 == old(xmm12);
        win ==> xmm13 == old(xmm13);
        win ==> xmm14 == old(xmm14);
        win ==> xmm15 == old(xmm15);

        // Linux:
        !win ==> rbx == old(rbx);
        !win ==> rbp == old(rbp);
        !win ==> r12 == old(r12);
        !win ==> r13 == old(r13);
        !win ==> r14 == old(r14);
        !win ==> r15 == old(r15);
{
    Push(r15);
    Push(r14);
    Push(r13);
    Push(r12);
    Push(rsi);
    Push(rdi);
    Push(rbp);
    Push(rbx);

    inline if (win) {
        PushXmm(xmm15, rax);
        PushXmm(xmm14, rax);
        PushXmm(xmm13, rax);
        PushXmm(xmm12, rax);
        PushXmm(xmm11, rax);
        PushXmm(xmm10, rax);
        PushXmm(xmm9,  rax);
        PushXmm(xmm8,  rax);
        PushXmm(xmm7,  rax);
        PushXmm(xmm6,  rax);
    }


    // Shuffle the incoming arguments around
    inline if (win) {
        Mov64(r14, rcx);
        Mov64(r13, rdx);
        Mov64(rax, r8);
        Mov64(r11, r9);

        // These are offset, since we already moved rsp during callee_save_registers
        Load64_stack(r10, rsp, 224 + 40 + 0);
        Load64_stack(r8,  rsp, 224 + 40 + 8);
        Load64_stack(rbx, rsp, 224 + 40 +16);
        Load64_stack(r15, rsp, 224 + 40 +24);
    } else {
        Mov64(r14, rdi);
        Mov64(r13, rsi);
        Mov64(rax, rdx);
        Mov64(r11, rcx);
        Mov64(r10, r8);
        Mov64(r8,  r9);

        // These are offset, since we already moved rsp during callee_save_registers
        Load64_stack(rbx, rsp, 64 + 8 + 0);
        Load64_stack(r15, rsp, 64 + 8 + 8);
    }

    // Load the IV into its XMM register
    Load128_buffer(xmm7, r10, 0, Secret, iv_b, 0);

    gcm_core(alg, reverse_bytes_quad32(buffer128_read(iv_b, 0, old(mem))), plain_b, auth_b, out_b, key,  buffer128_as_seq(old(mem), keys_b), keys_b);

    // Auth tag is still in xmm1, so save it to memory
    Store128_buffer(r15, xmm1, 0, Secret, tag_b, 0);

    inline if (win) {
        PopXmm(xmm6,  rax, old(xmm6));
        PopXmm(xmm7,  rax, old(xmm7));
        PopXmm(xmm8,  rax, old(xmm8));
        PopXmm(xmm9,  rax, old(xmm9));
        PopXmm(xmm10, rax, old(xmm10));
        PopXmm(xmm11, rax, old(xmm11));
        PopXmm(xmm12, rax, old(xmm12));
        PopXmm(xmm13, rax, old(xmm13));
        PopXmm(xmm14, rax, old(xmm14));
        PopXmm(xmm15, rax, old(xmm15));
    }

    Pop(rbx);
    Pop(rbp);
    Pop(rdi);
    Pop(rsi);
    Pop(r12);
    Pop(r13);
    Pop(r14);
    Pop(r15);
}
