module Hacl.Test.AesCTR.NI
open FStar.HyperStack.All

#set-options "--lax"

open LowStar.Buffer
open Lib.IntTypes

val main: unit -> ST C.exit_code
  (requires (fun h -> True))
  (ensures  (fun h0 r h1 -> True))
let main () =
  push_frame();

  
  let key0 = alloca_of_list
  [
    0x7Euy;0x24uy;0x06uy;0x78uy;0x17uy;0xFAuy;0xE0uy;0xD7uy;
    0x43uy;0xD6uy;0xCEuy;0x1Fuy;0x32uy;0x53uy;0x91uy;0x63uy
] in
  let iv0 = alloca_of_list
  [
    0x00uy;0x6Cuy;0xB6uy;0xDBuy;0xC0uy;0x54uy;0x3Buy;0x59uy;
    0xDAuy;0x48uy;0xD9uy;0x0Buy ] in
  let input0 = alloca_of_list [
    0x00uy;0x01uy;0x02uy;0x03uy;0x04uy;0x05uy;0x06uy;0x07uy;
    0x08uy;0x09uy;0x0Auy;0x0Buy;0x0Cuy;0x0Duy;0x0Euy;0x0Fuy;
    0x10uy;0x11uy;0x12uy;0x13uy;0x14uy;0x15uy;0x16uy;0x17uy;
    0x18uy;0x19uy;0x1Auy;0x1Buy;0x1Cuy;0x1Duy;0x1Euy;0x1Fuy
    ] in
  let cip0 = alloca_of_list
[
    0x51uy;0x04uy;0xA1uy;0x06uy;0x16uy;0x8Auy;0x72uy;0xD9uy;
    0x79uy;0x0Duy;0x41uy;0xEEuy;0x8Euy;0xDAuy;0xD3uy;0x88uy;
    0xEBuy;0x2Euy;0x1Euy;0xFCuy;0x46uy;0xDAuy;0x57uy;0xC8uy;
    0xFCuy;0xE6uy;0x30uy;0xDFuy;0x91uy;0x41uy;0xBEuy;0x28uy

  ] in
  let comp0 = alloca 0uy 32ul in
  Hacl.AesCTRNI.aes128_ctr_encrypt comp0 input0 (size 32) key0 iv0 (size 1);
  TestLib.compare_and_print (C.String.of_literal "AES-CTR NI encryption 0") cip0 comp0 32ul;

  pop_frame();
  C.EXIT_SUCCESS
