#
# General extraction
#

ifndef HACL_HOME
  HACL_HOME:=$(abspath $(dir $(lastword $(MAKEFILE_LIST))))
else
  HACL_HOME:=$(abspath $(HACL_HOME))
endif

.PHONY: snapshot-collect snapshots-all snapshots-update snapshots-remove snapshots/hacl-c/kremlib.h snapshots/hacl-c/vec128.h snapshots/hacl-c/kremlib.c snapshots/hacl-c/kremlib_base.h snapshots/nss/kremlib.h snapshots/nss/kremlib.c snapshots/nss/kremlib_base.h snapshots/nss/vec128.h

#
# Extraction target for the stateful code
#

# BB: Add extract-c-apps to extract-c when libsodium is on the build machine
extract-c: extract-c-code extract-c-crypto # extract-c-apps

extract-c-code:
	$(GFIND) code -name out.krml -exec touch {} \;
	$(MAKE) -C code extract-c

extract-c-code-experimental:
	$(MAKE) -C code/experimental extract-c

# Clean the code directories
clean-c-code:
	$(MAKE) -C code clean

#
# Snapshot targets
#

SNAPSHOT_DIR = # Substituted by the correct value depending on the compiler

SNAPSHOT_FILES= $(addprefix snapshots/kremlib/, kremlib.h kremlib.c kremlib_base.h testlib.* FStar.* vec128.h Makefile) \
	$(addprefix code/poly1305/poly-c/, Hacl_Poly1305_64.* AEAD_Poly1305_64.*) \
	./code/curve25519/x25519-c/Hacl_Curve25519.* \
	./code/salsa-family/chacha-c/Hacl_Chacha20.* \
	./code/salsa-family/salsa-c/Hacl_Salsa20.* \
	$(addprefix code/api/aead-c/, Hacl_Chacha20Poly1305.*) \
	$(addprefix code/api/box-c/, NaCl.*) \
	$(addprefix code/api/policies-c/, Hacl_Policies.* ) \
	$(addprefix code/ed25519/ed25519-c/, Hacl_Ed25519.*) \
	$(addprefix code/hash/sha2-c/, Hacl_SHA2_256.*) \
	$(addprefix code/hash/sha2-c/, Hacl_SHA2_384.*) \
	$(addprefix code/hash/sha2-c/, Hacl_SHA2_512.*) \
	$(addprefix code/hmac/hmac-c/, Hacl_HMAC_SHA2_256.*) \
	$(addprefix code/salsa-family/chacha-vec128-c/, Hacl_Chacha20_Vec128.*)

SNAPSHOT_CCOMP_FILES=$(KREMLIN_HOME)/kremlib/kremlib.c $(KREMLIN_HOME)/kremlib/kremlib.h \
	code/lib/kremlin/ccomp-c/FStar.c code/lib/kremlin/ccomp-c/FStar.h

snapshot-collect:
	mkdir -p $(SNAPSHOT_DIR)
	cp $(SNAPSHOT_FILES) $(SNAPSHOT_DIR)/
	touch $(SNAPSHOT_DIR)/Prims.h
ifeq ($(SNAPSHOT_DIR),snapshots/hacl-c-compcert)
	cp $(SNAPSHOT_CCOMP_FILES) $(SNAPSHOT_DIR)/
else
endif
	$(MAKE) -C $(SNAPSHOT_DIR) clean

snapshots/snapshot-compcert: clean-c-code
	if $(HAS_CCOMP); then $(MAKE) -B extract-c-code extract-c-code-experimental KOPTS="-cc compcert -funroll-loops 5 -fnouint128 -fnostruct-passing" HACL_RELEASE="$(HACL_RELEASE)" HACL_LICENSE="$(HACL_LICENSE)"; fi
	if $(HAS_CCOMP); then $(MAKE) -B snapshot-collect SNAPSHOT_DIR=snapshots/snapshot-compcert; fi

snapshots/snapshot-msvc: clean-c-code
	if $(HAS_CL); then $(MAKE) extract-c-code extract-c-code-experimental KOPTS="-cc msvc -drop FStar" HACL_RELEASE="$(HACL_RELEASE)" HACL_LICENSE="$(HACL_LICENSE)"; fi
	if $(HAS_CL); then $(MAKE) snapshot-collect SNAPSHOT_DIR=snapshots/snapshot-msvc; fi

snapshots/snapshot-gcc: clean-c-code
	$(MAKE) -B extract-c-code extract-c-code-experimental KOPTS="-drop FStar -fparentheses" HACL_RELEASE="$(HACL_RELEASE)" HACL_LICENSE="$(HACL_LICENSE)"
	$(MAKE) -B snapshot-collect SNAPSHOT_DIR=snapshots/snapshot-gcc

snapshots/snapshot-gcc-unrolled: clean-c-code
	$(MAKE) -B extract-c-code extract-c-code-experimental KOPTS="-funroll-loops 5 -drop FStar -fparentheses" HACL_RELEASE="$(HACL_RELEASE)" HACL_LICENSE="$(HACL_LICENSE)"
	$(MAKE) -B snapshot-collect SNAPSHOT_DIR=snapshots/snapshot-gcc-unrolled

#
# Production targets
#

HACL_RELEASE=1
HACL_LICENSE?=$(HACL_HOME)/snapshots/licenses/MIT
HACL_LICENSE_NSS?=$(HACL_HOME)/snapshots/licenses/APACHE2

snapshots/hacl-c/kremlib:
	for f in kremlib.h kremlib.c kremlib_base.h FStar.h FStar.c vec128.h; do \
		(cat $(HACL_LICENSE) snapshots/kremlib/$$f ) > snapshots/hacl-c/$$f ; \
	done

snapshots/nss/kremlib:
	for f in kremlib.h kremlib_base.h FStar.h FStar.c vec128.h; do \
		(cat $(HACL_LICENSE_NSS) snapshots/kremlib/$$f ) > snapshots/nss/$$f ; \
	done


SNAPSHOT_HACL_C_FILES = $(addprefix snapshots/snapshot-gcc/, AEAD_Poly1305_64.* Hacl_Chacha20.* Hacl_Chacha20Poly1305.* Hacl_Chacha20_Vec128.* Hacl_Policies.* NaCl.* Hacl_Poly1305_64.* Hacl_Salsa20.* Hacl_SHA2_* Hacl_HMAC_SHA2_*) \
	$(addprefix snapshots/snapshot-gcc-unrolled/, Hacl_Curve25519* Hacl_Ed25519*) \
	$(addprefix snapshots/kremlib/, kremlib.h kremlib.c kremlib_base.h FStar.* vec128.h Makefile)

snapshots/hacl-c: snapshots-remove-intermediates
	$(MAKE) HACL_RELEASE="$(HACL_RELEASE)" HACL_LICENSE="$(HACL_LICENSE)" snapshots/snapshot-gcc
	$(MAKE) HACL_RELEASE="$(HACL_RELEASE)" HACL_LICENSE="$(HACL_LICENSE)" snapshots/snapshot-gcc-unrolled
	rm -rf snapshots/hacl-c
	mkdir -p snapshots/hacl-c
	cp $(SNAPSHOT_HACL_C_FILES) ./snapshots/hacl-c
	$(MAKE) snapshots/hacl-c/kremlib

snapshots/nss: snapshots-remove-intermediates
	$(MAKE) HACL_RELEASE="$(HACL_RELEASE)" HACL_LICENSE="$(HACL_LICENSE_NSS)" snapshots/snapshot-gcc-unrolled
	rm -rf snapshots/nss
	mkdir -p snapshots/nss
	cp snapshots/snapshot-gcc-unrolled/Hacl_Curve25519.* snapshots/nss
	cp snapshots/snapshot-gcc-unrolled/Hacl_Chacha20.* snapshots/nss
	cp snapshots/snapshot-gcc-unrolled/Hacl_Poly1305_64.* snapshots/nss
	cp snapshots/snapshot-gcc-unrolled/Hacl_Chacha20_Vec128.* snapshots/nss
	cp snapshots/snapshot-gcc-unrolled/vec128.h snapshots/nss
	$(MAKE) snapshots/nss/kremlib

#
# Build, refresh and clean targets for all snapshots
#

snapshots-intermediates:
	$(MAKE) snapshots/snapshot-gcc
	$(MAKE) snapshots/snapshot-gcc-unrolled
	$(MAKE) snapshots/snapshot-msvc
	$(MAKE) snapshots/snapshot-compcert

snapshots-production:
	$(MAKE) snapshots/hacl-c
	$(MAKE) snapshots/nss

snapshots-remove-intermediates:
	rm -rf snapshots/snapshot*

snapshots-remove-production:
	rm -rf snapshots/hacl-c
	rm -rf snapshots/nss

#
# Building the shared library
#

snapshots/hacl-c/libhacl.so: snapshots/hacl-c
	$(MAKE) -C snapshots/hacl-c CC="$(GCC) $(GCC_OPTS) -fPIC" libhacl.so

snapshots/hacl-c/libhacl32.so: snapshots/hacl-c
	$(MAKE) -C snapshots/hacl-c CC="$(GCC) $(GCC_OPTS) -fPIC" libhacl32.so

snapshots/snapshot-gcc/libhacl.so: snapshots/snapshot-gcc
	$(MAKE) -C snapshots/snapshot-gcc CC="$(GCC) $(GCC_OPTS) -fPIC" libhacl.so

snapshots/snapshot-gcc/libhacl32.so: snapshots/snapshot-gcc
	$(MAKE) -C snapshots/snapshot-gcc CC="$(GCC) $(GCC_OPTS) -fPIC" libhacl32.so

snapshots/snapshot-gcc-unrolled/libhacl.so: snapshots/snapshot-gcc-unrolled
	$(MAKE) -C snapshots/snapshot-gcc-unrolled CC="$(GCC) $(GCC_OPTS) -fPIC" libhacl.so

snapshots/snapshot-gcc-unrolled/libhacl32.so: snapshots/snapshot-gcc-unrolled
	$(MAKE) -C snapshots/snapshot-gcc-unrolled CC="$(GCC) $(GCC_OPTS) -fPIC" libhacl32.so

# BB: The options for Compcert and MSVC must be adjusted here
snapshots/hacl-c-compcert/libhacl.so: snapshots/hacl-c-compcert
	$(MAKE) -C snapshots/hacl-c-compcert CC="$(CCOMP) $(CCOMP_OPTS) -fPIC" libhacl.so

snapshots/hacl-c-compcert/libhacl32.so: snapshots/hacl-c-compcert
	$(MAKE) -C snapshots/hacl-c-compcert CC="$(CCOMP) $(CCOMP_OPTS) -fPIC" libhacl32.so

snapshots/snapshot-msvc/libhacl.so: snapshots/snapshot-msvc
	$(MAKE) -C snapshots/snapshot-msvc CC="$(MSVC) $(MSVC_OPTS) -fPIC" libhacl.so

snapshots/snapshot-msvc/libhacl32.so: snapshots/snapshot-msvc
	$(MAKE) -C snapshots/snapshot-msvc CC="$(MSVC) $(MSVC_OPTS) -fPIC" libhacl32.so

build/libhacl.so:
	mkdir -p build
	$(MAKE) snapshots/hacl-c/libhacl.so
	cp snapshots/hacl-c/libhacl.so build

build/libhacl32.so:
	mkdir -p build
	$(MAKE) snapshots/hacl-c/libhacl32.so
	cp snapshots/hacl-c/libhacl32.so build


#
# Compilers and tools
#

HAS_CL=$(shell which cl.exe >/dev/null 2>&1 && echo true || echo false)
HAS_CCOMP=$(shell which ccomp >/dev/null 2>&1 && echo true || echo false)
GFIND=$(shell which gfind >/dev/null 2>&1 && echo gfind || echo find)

ifeq ($(OS),Windows_NT)
  GCC=x86_64-w64-mingw32-gcc.exe
else
  GCC=$(shell which gcc-7 >/dev/null 2>&1 && echo gcc-7 || (which gcc-6 >/dev/null 2>&1 && echo gcc-6 || echo gcc))
  CMAKE_COMPILER_OPTION := -DCMAKE_C_COMPILER=$(GCC)
  ENABLE_LTO=-flto
endif
GCC_OPTS=$(ENABLE_LTO) -std=c11 -D_GNU_SOURCE
