module Spec.Chacha20_vec256

open FStar.HyperStack.All

module ST = FStar.HyperStack.ST

open FStar.Seq
open FStar.UInt32
open FStar.Endianness

module U32 = FStar.UInt32

#set-options "--initial_fuel 0 --max_fuel 0 --initial_ifuel 0 --max_ifuel 0 --z3rlimit 100"

let keylen = 32 (* in bytes *)
let blocklen = 384  (* in bytes *)
let noncelen = 12 (* in bytes *)

type key = lbytes keylen
type block = lbytes blocklen
type nonce = lbytes noncelen
type counter = UInt.uint_t 32

// using @ as a functional substitute for ;
// internally, blocks are represented as 16 x 4-byte integers
assume type vec
type state = m:seq vec      {length m = 4}
type idx = n:nat{n < 4}
type shuffle = state -> Tot state 

assume val op_Plus_Percent_Hat: x:vec -> y:vec -> Tot vec
assume val op_Hat_Hat: x:vec -> y:vec -> Tot vec
assume val op_Less_Less_Less: x:vec -> n:UInt32.t{v n < 32} -> Tot vec
assume val shuffle_right: vec -> idx -> Tot vec

let shuffle_row (i:idx) (n:idx) (s:state) : Tot state = 
       upd s i (shuffle_right (index s i) n)

val line: idx -> idx -> idx -> s:UInt32.t {v s < 32} -> shuffle
let line a b d s m = 
  let m = upd m a (index m a +%^ index m b) in
  let m = upd m d ((index m d ^^  index m a) <<< s) in
  m


let round (st:state) : Tot state =
  let st = line 0 1 3 16ul st in
  let st = line 2 3 1 12ul st in
  let st = line 0 1 3 8ul  st in
  let st = line 2 3 1 7ul  st in
  st


let shuffle_rows_0123 (st:state) : Tot state =
  let st = shuffle_row 1 1 st in
  let st = shuffle_row 2 2 st in
  let st = shuffle_row 3 3 st in
  st


let shuffle_rows_0321 (st:state) : Tot state =
  let st = shuffle_row 1 3 st in
  let st = shuffle_row 2 2 st in
  let st = shuffle_row 3 1 st in
  st

let column_round : shuffle = round


let diagonal_round (st:state) : Tot state =
  let st = shuffle_rows_0123 st in
  let st = round           st in
  let st = shuffle_rows_0321 st in
  st
  

let double_round (st:state) : Tot state =
  let st = column_round st in
  let st = diagonal_round st in
  st

(* type state3 = m:seq vec      {length m = 12} *)
type state3 = | VecUnits: v1:state -> v2:state -> v3:state -> state3
(* let get_1 s = Mktuple3?._1 s *)
(* let get_2 s = Mktuple3?._2 s *)
(* let get_3 s = Mktuple3?._3 s *)

let double_round' (st:state3) : Tot state3 =
  VecUnits (double_round (st.v1)) (double_round (st.v2)) (double_round (st.v3))

let rounds (st:state3) : Tot state3 = 
    C.Loops.repeat_spec 10 double_round' st (* 20 rounds *)

(* let rounds : shuffle =  *)
(*     iter 10 double_round (\* 20 rounds *\) *)

let sum_states (s:state) (s':state) : Tot state =
  C.Loops.seq_map2 op_Plus_Percent_Hat s' s

let sum_states' (st:state3) (st':state3) : Tot state3 =
  VecUnits (sum_states st.v1 st'.v1) (sum_states st.v2 st'.v2) (sum_states st.v3 st'.v3)
  
let chacha20_core (s:state3) : Tot state3 = 
    let s' = rounds s in
    let s'' = sum_states' s s' in
    s''

(* state initialization *) 

unfold let constants = [0x61707865ul; 0x3320646eul; 0x79622d32ul; 0x6b206574ul;
                        0x61707865ul; 0x3320646eul; 0x79622d32ul; 0x6b206574ul]

// JK: I have to add those assertions to typechecks, would be nice to get rid of it
assume val setup: key -> nonce -> counter -> Tot state
assume val chacha20_block: key -> nonce -> counter -> Tot block

(* let setup (k:key) (n:nonce) (c:counter): Tot state = *)
(*   assert_norm(List.Tot.length constants = 8); assert_norm(List.Tot.length [UInt32.uint_to_t c] = 1); *)
(*   let constants:vec = createL constants in *)
(*   let key_part_1:vec = uint32s_from_le 4 (Seq.slice k 0 16) @| uint32s_from_le 4 (Seq.slice k 0 16) in *)
(*   let key_part_2:vec = uint32s_from_le 4 (Seq.slice k 16 32) @| uint32s_from_le 4 (Seq.slice k 16 32) in *)
(*   let nonce    :vec = Seq.cons (UInt32.uint_to_t c) (uint32s_from_le 3 n) @| *)
(*                       Seq.cons (UInt32.uint_to_t ((c+1)%0x100000000)) (uint32s_from_le 3 n) in *)
(*   assert_norm(List.Tot.length [constants; key_part_1; key_part_2; nonce] = 4); *)
(*   Seq.seq_of_list [constants; key_part_1; key_part_2; nonce] *)

(* let flush (st':state) : Tot (lbytes 128) = *)
(*     uint32s_to_le 4 (slice (index st' 0) 0 4) @| *)
(*     uint32s_to_le 4 (slice (index st' 1) 0 4) @| *)
(*     uint32s_to_le 4 (slice (index st' 2) 0 4) @| *)
(*     uint32s_to_le 4 (slice (index st' 3) 0 4) @| *)
(*     uint32s_to_le 4 (slice (index st' 0) 4 8) @| *)
(*     uint32s_to_le 4 (slice (index st' 1) 4 8) @| *)
(*     uint32s_to_le 4 (slice (index st' 2) 4 8) @| *)
(*     uint32s_to_le 4 (slice (index st' 3) 4 8) *)

let setup_units (k:key) (n:nonce) (c:counter) : Tot state3 =
    let st1 = setup k n c in
    let st2 = setup k n ((c+2)%0x100000000) in
    let st3 = setup k n ((c+4)%0x100000000) in
    VecUnits st1 st2 st3

(* let chacha20_block (k:key) (n:nonce) (c:counter): Tot (lbytes 384) = *)
(*     let st = setup_units k n c in *)
(*     let st' = chacha20_core st in *)
(*     flush (st'.v1) @| flush (st'.v2) @| flush (st'.v3) *)


let chacha20_ctx: Spec.CTR.block_cipher_ctx = 
    let open Spec.CTR in
    {
    keylen = keylen;
    blocklen = blocklen;
    noncelen = noncelen;
    counterbits = 32;
    incr = 6
    }

let chacha20_cipher: Spec.CTR.block_cipher chacha20_ctx = chacha20_block

let chacha20_encrypt_bytes key nonce counter m = 
    Spec.CTR.counter_mode chacha20_ctx chacha20_cipher key nonce counter m

#set-options "--lax"

unfold let test_plaintext = [
    0x4cuy; 0x61uy; 0x64uy; 0x69uy; 0x65uy; 0x73uy; 0x20uy; 0x61uy;
    0x6euy; 0x64uy; 0x20uy; 0x47uy; 0x65uy; 0x6euy; 0x74uy; 0x6cuy;
    0x65uy; 0x6duy; 0x65uy; 0x6euy; 0x20uy; 0x6fuy; 0x66uy; 0x20uy;
    0x74uy; 0x68uy; 0x65uy; 0x20uy; 0x63uy; 0x6cuy; 0x61uy; 0x73uy;
    0x73uy; 0x20uy; 0x6fuy; 0x66uy; 0x20uy; 0x27uy; 0x39uy; 0x39uy;
    0x3auy; 0x20uy; 0x49uy; 0x66uy; 0x20uy; 0x49uy; 0x20uy; 0x63uy;
    0x6fuy; 0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x6fuy; 0x66uy; 0x66uy;
    0x65uy; 0x72uy; 0x20uy; 0x79uy; 0x6fuy; 0x75uy; 0x20uy; 0x6fuy;
    0x6euy; 0x6cuy; 0x79uy; 0x20uy; 0x6fuy; 0x6euy; 0x65uy; 0x20uy;
    0x74uy; 0x69uy; 0x70uy; 0x20uy; 0x66uy; 0x6fuy; 0x72uy; 0x20uy;
    0x74uy; 0x68uy; 0x65uy; 0x20uy; 0x66uy; 0x75uy; 0x74uy; 0x75uy;
    0x72uy; 0x65uy; 0x2cuy; 0x20uy; 0x73uy; 0x75uy; 0x6euy; 0x73uy;
    0x63uy; 0x72uy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
    0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
    0x74uy; 0x2euy
]

unfold let test_plaintext2 = [ 
      0x4cuy; 0x61uy; 0x64uy; 0x69uy; 0x65uy; 0x73uy; 0x20uy; 0x61uy;
      0x6euy; 0x64uy; 0x20uy; 0x47uy; 0x65uy; 0x6euy; 0x74uy; 0x6cuy;
      0x65uy; 0x6duy; 0x65uy; 0x6euy; 0x20uy; 0x6fuy; 0x66uy; 0x20uy;
      0x74uy; 0x68uy; 0x65uy; 0x20uy; 0x63uy; 0x6cuy; 0x61uy; 0x73uy;
      0x73uy; 0x20uy; 0x6fuy; 0x66uy; 0x20uy; 0x27uy; 0x39uy; 0x39uy;
      0x3auy; 0x20uy; 0x49uy; 0x66uy; 0x20uy; 0x49uy; 0x20uy; 0x63uy;
      0x6fuy; 0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x6fuy; 0x66uy; 0x66uy;
      0x65uy; 0x72uy; 0x20uy; 0x79uy; 0x6fuy; 0x75uy; 0x20uy; 0x6fuy;
      0x6euy; 0x6cuy; 0x79uy; 0x20uy; 0x6fuy; 0x6euy; 0x65uy; 0x20uy;
      0x74uy; 0x69uy; 0x70uy; 0x20uy; 0x66uy; 0x6fuy; 0x72uy; 0x20uy;
      0x74uy; 0x68uy; 0x65uy; 0x20uy; 0x66uy; 0x75uy; 0x74uy; 0x75uy;
      0x72uy; 0x65uy; 0x2cuy; 0x20uy; 0x73uy; 0x75uy; 0x6euy; 0x73uy;
      0x63uy; 0x72uy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
      0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
      0x74uy; 0x2euy ]

unfold let test_ciphertext = [
    0x6euy; 0x2euy; 0x35uy; 0x9auy; 0x25uy; 0x68uy; 0xf9uy; 0x80uy;
    0x41uy; 0xbauy; 0x07uy; 0x28uy; 0xdduy; 0x0duy; 0x69uy; 0x81uy;
    0xe9uy; 0x7euy; 0x7auy; 0xecuy; 0x1duy; 0x43uy; 0x60uy; 0xc2uy;
    0x0auy; 0x27uy; 0xafuy; 0xccuy; 0xfduy; 0x9fuy; 0xaeuy; 0x0buy;
    0xf9uy; 0x1buy; 0x65uy; 0xc5uy; 0x52uy; 0x47uy; 0x33uy; 0xabuy;
    0x8fuy; 0x59uy; 0x3duy; 0xabuy; 0xcduy; 0x62uy; 0xb3uy; 0x57uy;
    0x16uy; 0x39uy; 0xd6uy; 0x24uy; 0xe6uy; 0x51uy; 0x52uy; 0xabuy;
    0x8fuy; 0x53uy; 0x0cuy; 0x35uy; 0x9fuy; 0x08uy; 0x61uy; 0xd8uy;
    0x07uy; 0xcauy; 0x0duy; 0xbfuy; 0x50uy; 0x0duy; 0x6auy; 0x61uy;
    0x56uy; 0xa3uy; 0x8euy; 0x08uy; 0x8auy; 0x22uy; 0xb6uy; 0x5euy;
    0x52uy; 0xbcuy; 0x51uy; 0x4duy; 0x16uy; 0xccuy; 0xf8uy; 0x06uy;
    0x81uy; 0x8cuy; 0xe9uy; 0x1auy; 0xb7uy; 0x79uy; 0x37uy; 0x36uy;
    0x5auy; 0xf9uy; 0x0buy; 0xbfuy; 0x74uy; 0xa3uy; 0x5buy; 0xe6uy;
    0xb4uy; 0x0buy; 0x8euy; 0xeduy; 0xf2uy; 0x78uy; 0x5euy; 0x42uy;
    0x87uy; 0x4duy
]

unfold let test_ciphertext2 = [
	 0x6euy; 0x2euy; 0x35uy; 0x9auy; 0x25uy; 0x68uy; 0xf9uy;
	 0x80uy; 0x41uy; 0xbauy; 0x07uy; 0x28uy; 0xdduy; 0x0duy;
	 0x69uy; 0x81uy; 0xe9uy; 0x7euy; 0x7auy; 0xecuy; 0x1duy;
	 0x43uy; 0x60uy; 0xc2uy; 0x0auy; 0x27uy; 0xafuy; 0xccuy;
	 0xfduy; 0x9fuy; 0xaeuy; 0x0buy; 0xf9uy; 0x1buy; 0x65uy;
	 0xc5uy; 0x52uy; 0x47uy; 0x33uy; 0xabuy; 0x8fuy; 0x59uy;
	 0x3duy; 0xabuy; 0xcduy; 0x62uy; 0xb3uy; 0x57uy; 0x16uy;
	 0x39uy; 0xd6uy; 0x24uy; 0xe6uy; 0x51uy; 0x52uy; 0xabuy;
	 0x8fuy; 0x53uy; 0x0cuy; 0x35uy; 0x9fuy; 0x08uy; 0x61uy;
	 0xd8uy; 0x07uy; 0xcauy; 0x0duy; 0xbfuy; 0x50uy; 0x0duy;
	 0x6auy; 0x61uy; 0x56uy; 0xa3uy; 0x8euy; 0x08uy; 0x8auy;
	 0x22uy; 0xb6uy; 0x5euy; 0x52uy; 0xbcuy; 0x51uy; 0x4duy;
	 0x16uy; 0xccuy; 0xf8uy; 0x06uy; 0x81uy; 0x8cuy; 0xe9uy;
	 0x1auy; 0xb7uy; 0x79uy; 0x37uy; 0x36uy; 0x5auy; 0xf9uy;
	 0x0buy; 0xbfuy; 0x74uy; 0xa3uy; 0x5buy; 0xe6uy; 0xb4uy;
	 0x0buy; 0x8euy; 0xeduy; 0xf2uy; 0x78uy; 0x5euy; 0x42uy;
	 0x87uy; 0x4duy; 0x11uy; 0x66uy; 0x1duy; 0x00uy; 0x6duy;
	 0xceuy; 0xfduy; 0x97uy; 0xd8uy; 0xc8uy; 0x5buy; 0xf4uy;
	 0xe4uy; 0x84uy; 0xbcuy; 0xc3uy; 0x63uy; 0x29uy; 0x00uy;
	 0xb3uy; 0xeauy; 0x2fuy; 0x44uy; 0x19uy; 0x8auy; 0xc1uy;
	 0x25uy; 0x35uy; 0xd3uy; 0x8cuy; 0xdduy; 0x80uy; 0xeeuy;
	 0x23uy; 0xafuy; 0x6duy; 0xdauy; 0x25uy; 0xe3uy; 0x44uy;
	 0xaeuy; 0x8fuy; 0x64uy; 0x2fuy; 0x01uy; 0xb9uy; 0x7euy;
	 0x5cuy; 0x36uy; 0xc8uy; 0x96uy; 0xefuy; 0xf9uy; 0xdfuy;
	 0xeduy; 0x00uy; 0x5auy; 0x48uy; 0x10uy; 0xa3uy; 0xfeuy;
	 0x0cuy; 0x39uy; 0xaeuy; 0x13uy; 0xaeuy; 0xf4uy; 0x81uy;
	 0xebuy; 0x78uy; 0x34uy; 0x51uy; 0xe2uy; 0x9cuy; 0x6cuy;
	 0xb0uy; 0x4buy; 0x7auy; 0xdauy; 0xfduy; 0x90uy; 0x82uy;
	 0x94uy; 0xaduy; 0x7euy; 0x33uy; 0x45uy; 0x09uy; 0x23uy;
	 0x08uy; 0x57uy; 0x01uy; 0xecuy; 0xfauy; 0x15uy; 0xd1uy;
	 0x46uy; 0x20uy; 0x43uy; 0x97uy; 0xb1uy; 0x19uy; 0x10uy;
	 0x19uy; 0xe1uy; 0x80uy; 0x87uy; 0x14uy; 0x5buy; 0x68uy;
	 0xbduy; 0xa3uy; 0x58uy; 0x2buy; 0xeduy; 0xe7uy; 0xd1uy;
	 0xb4uy; 0xd9uy; 0x99uy; 0x40uy; 0xc0uy; 0xa6uy; 0xf7uy;
	 0x61uy; 0xc6uy; 0xf3uy; 0x25uy; 0x76uy; 0x16uy; 0x7buy;
	 0x85uy; 0x52uy; 0x16uy; 0x95uy; 0xbduy; 0x21uy; 0x5duy;
	 0x1buy; 0xc4uy; 0xeduy; 0x4fuy; 0xbfuy; 0x7fuy; 0xd0uy;
	 0xc7uy; 0x73uy; 0x9duy; 0x4fuy; 0x67uy; 0x99uy; 0x1buy;
	 0x35uy; 0xcbuy; 0xfbuy; 0x55uy; 0xf3uy; 0x31uy; 0x2buy;
	 0xefuy; 0x5fuy; 0xa2uy; 0xd9uy; 0x60uy; 0xc4uy; 0x62uy;
	 0x7duy; 0x6auy; 0x3euy; 0x2cuy; 0xb0uy; 0x24uy; 0x01uy;
	 0xc4uy; 0x45uy; 0x51uy; 0xd2uy; 0x27uy; 0xceuy; 0xc1uy;
	 0x2euy; 0x12uy; 0xe8uy; 0xa5uy; 0x71uy; 0x4fuy; 0x62uy;
	 0x8duy; 0x75uy; 0xccuy; 0xbduy; 0xfauy; 0xbduy; 0xd9uy;
	 0xaduy; 0x94uy; 0x57uy; 0x58uy; 0x57uy; 0x47uy; 0xdfuy;
	 0x8cuy; 0xafuy; 0xf7uy; 0x59uy; 0x54uy; 0xfduy; 0xd3uy;
	 0xb2uy; 0x55uy; 0x05uy; 0xa8uy; 0xb7uy; 0x02uy; 0x0euy;
	 0x87uy; 0x70uy; 0x24uy; 0x62uy; 0xf9uy; 0x70uy; 0xd2uy;
	 0x13uy; 0xcauy; 0x5cuy; 0xe9uy; 0x5auy; 0xb4uy; 0x05uy;
	 0x43uy; 0x92uy; 0x02uy; 0x14uy; 0xefuy; 0xfauy; 0x4euy;
	 0x25uy; 0x0auy; 0x4euy; 0x32uy; 0x73uy; 0xefuy; 0x88uy;
	 0x75uy; 0x55uy; 0x4cuy; 0xdcuy; 0xc9uy; 0x83uy; 0x99uy;
	 0x72uy; 0x73uy; 0xbfuy; 0xbauy; 0x6fuy; 0x4euy; 0x3duy;
	 0x7duy; 0x2duy; 0xc5uy; 0x9duy; 0xe0uy; 0xccuy; 0xcauy;
	 0x5buy; 0x1fuy; 0x0euy; 0x48uy; 0x34uy; 0x76uy; 0x6euy;
	 0xb5uy; 0xc7uy; 0xb1uy; 0xd5uy; 0x4euy; 0x03uy; 0xe1uy;
	 0x09uy; 0x4cuy; 0xeauy; 0x6duy; 0x0auy; 0x44uy; 0x02uy;
	 0xfduy; 0xfauy; 0x11uy; 0x08uy; 0x30uy; 0x56uy; 0x88uy;
	 0x90uy; 0xaauy; 0x38uy; 0xbbuy; 0x7fuy; 0x60uy; 0x2cuy;
	 0x90uy; 0x67uy; 0x89uy; 0xc3uy; 0xf5uy; 0x80uy; 0xc1uy;
	 0x79uy; 0x29uy; 0x61uy; 0xe7uy; 0x6duy; 0xc5uy; 0x29uy;
	 0x26uy; 0x7auy; 0x17uy; 0xa0uy; 0x54uy; 0x7auy; 0x24uy;
	 0xe5uy; 0x57uy; 0xa9uy; 0x30uy; 0xaauy; 0xa9uy; 0x44uy;
	 0x96uy; 0xf1uy; 0x69uy; 0xbduy; 0xc8uy; 0x61uy; 0x5fuy;
	 0xccuy; 0xa2uy; 0xffuy; 0xf1uy; 0x4fuy; 0xc3uy; 0xd0uy;
	 0xd3uy; 0x94uy; 0x07uy; 0x1buy; 0xacuy; 0x19uy; 0x6fuy;
	 0x0duy; 0x15uy; 0x55uy; 0x54uy; 0x7cuy; 0xe7uy; 0x19uy;
	 0xf2uy; 0x69uy; 0xf1uy; 0x81uy; 0xfauy; 0x06uy; 0xe4uy;
	 0x72uy; 0x1fuy; 0xffuy; 0xb1uy; 0x67uy; 0xacuy; 0xb2uy;
	 0xd6uy; 0x70uy; 0xbfuy; 0x00uy; 0x3cuy; 0x1duy; 0x9cuy;
	 0x5fuy; 0x36uy; 0xccuy; 0x5fuy; 0xbduy; 0xeauy; 0x31uy;
	 0xd3uy; 0xdduy; 0x36uy; 0xf8uy; 0x92uy; 0xcbuy; 0xbeuy;
	 0xc3uy; 0x60uy; 0x60uy; 0xfeuy; 0x48uy; 0x46uy; 0x56uy;
	 0xc9uy; 0x95uy; 0x10uy; 0x59uy; 0xfauy; 0x88uy; 0x2buy;
	 0xc6uy; 0x7euy; 0x3fuy; 0x67uy; 0x79uy; 0x47uy; 0x2auy;
	 0x75uy; 0x7fuy; 0x6euy; 0x84uy; 0x84uy; 0x2auy; 0x80uy;
	 0x19uy; 0x81uy; 0x99uy; 0x90uy; 0x07uy; 0xb7uy; 0x29uy;
	 0x44uy; 0xd4uy; 0xf3uy; 0xffuy; 0x01uy; 0xc8uy; 0xbcuy;
	 0x93uy; 0xe7uy; 0x26uy; 0xd7uy; 0xc3uy; 0x5euy; 0x48uy;
	 0x0cuy; 0xdauy; 0x95uy; 0x08uy; 0x54uy; 0xd6uy; 0x99uy;
	 0xf3uy; 0x88uy; 0xd7uy; 0x96uy; 0x0cuy; 0xabuy; 0x45uy;
	 0xd1uy; 0x2fuy; 0xffuy; 0xc0uy; 0x3fuy; 0x69uy; 0x94uy;
	 0x25uy; 0x90uy; 0xf7uy; 0xbcuy; 0xc1uy; 0xbfuy; 0x39uy;
	 0xf6uy; 0x17uy; 0xfbuy; 0x44uy; 0x28uy; 0x08uy; 0x3buy;
	 0xfauy; 0x38uy; 0x10uy; 0xa0uy; 0x55uy; 0xfauy; 0xa9uy;
	 0xffuy; 0x7buy; 0x83uy; 0x57uy; 0xc8uy; 0x33uy; 0xcauy;
	 0x7auy; 0x0auy; 0xa7uy; 0x0auy; 0xeduy; 0x18uy; 0xf4uy;
	 0x59uy; 0xc1uy; 0x73uy; 0x13uy; 0x12uy; 0x38uy; 0x7buy;
	 0x5euy; 0x48uy; 0x43uy; 0xe2uy; 0x8duy; 0x6euy; 0xfeuy;
	 0x98uy; 0x1auy; 0xb8uy; 0xe8uy; 0x70uy; 0xbeuy; 0xd1uy;
	 0x7fuy; 0x4buy; 0xa7uy; 0x37uy; 0xc9uy; 0x76uy; 0xb8uy;
	 0x39uy; 0xb0uy; 0xbduy; 0xceuy; 0x52uy; 0x3buy; 0xbbuy;
	 0x97uy; 0xa1uy; 0xd5uy; 0x05uy; 0x58uy; 0xb0uy; 0x65uy;
	 0x33uy; 0xe0uy; 0x10uy; 0x2buy; 0x64uy; 0x92uy; 0x03uy;
	 0xf2uy; 0x29uy; 0x75uy; 0xc7uy; 0x2fuy; 0x27uy; 0x2cuy;
	 0xe2uy; 0x78uy; 0x8duy; 0x26uy; 0xa2uy; 0x6euy; 0xa3uy;
	 0x8euy; 0xe2uy; 0xa1uy; 0xbeuy; 0xccuy; 0xacuy; 0x28uy;
	 0xbeuy; 0xd1uy; 0x14uy; 0x4auy; 0x6fuy; 0x73uy; 0x50uy;
	 0x5buy; 0xb8uy; 0x2fuy; 0x4fuy; 0xd0uy; 0xdduy; 0x70uy;
	 0xe5uy; 0xa3uy; 0x88uy; 0x9auy; 0xdauy; 0xffuy; 0xeeuy;
	 0xdfuy; 0x94uy; 0xeeuy; 0xa5uy; 0xc3uy; 0x83uy; 0x4auy;
	 0xfcuy; 0x01uy; 0x0buy; 0x44uy; 0x7buy; 0xa9uy; 0x3buy;
	 0xe9uy; 0xa3uy; 0x5auy; 0xe3uy; 0x98uy; 0xeauy; 0x34uy;
	 0xccuy; 0xc4uy; 0xa4uy; 0xe9uy; 0xc6uy; 0xeauy; 0xb1uy;
	 0xdfuy; 0xa2uy; 0x60uy; 0x8cuy; 0x17uy; 0x59uy; 0x47uy;
	 0x45uy; 0x32uy; 0x05uy; 0x41uy; 0xf4uy; 0x8buy; 0x34uy;
	 0x86uy; 0xaduy; 0x9buy; 0x3duy; 0xb2uy; 0x57uy; 0xe2uy;
	 0xbeuy; 0x55uy; 0xbfuy; 0xe5uy; 0x82uy ]

unfold let test_key = [ 
       0uy; 1uy; 2uy; 3uy; 4uy; 5uy; 6uy; 7uy; 8uy; 9uy; 10uy; 11uy;
       12uy; 13uy; 14uy; 15uy; 16uy; 17uy; 18uy; 19uy; 20uy; 21uy;
       22uy; 23uy; 24uy; 25uy; 26uy; 27uy; 28uy; 29uy; 30uy; 31uy ]
       
unfold let test_nonce = [ 
       0uy; 0uy; 0uy; 0uy; 0uy; 0uy; 0uy; 0x4auy; 0uy; 0uy; 0uy; 0uy ]

unfold let test_counter = 1

let test() =
  assert_norm(List.Tot.length test_plaintext = 114);
  assert_norm(List.Tot.length test_ciphertext = 114);
  assert_norm(List.Tot.length test_plaintext2 = 754);
  assert_norm(List.Tot.length test_ciphertext2 = 654);
  assert_norm(List.Tot.length test_key = 32);
  assert_norm(List.Tot.length test_nonce = 12);
  let test_plaintext = createL test_plaintext in
  let test_ciphertext = createL test_ciphertext in
  let test_plaintext2 = createL test_plaintext2 in
  let test_ciphertext2 = createL test_ciphertext2 in
  let test_key = createL test_key in
  let test_nonce = createL test_nonce in
  chacha20_encrypt_bytes test_key test_nonce test_counter test_plaintext
  = test_ciphertext &&
  chacha20_encrypt_bytes test_key test_nonce test_counter test_plaintext2
  = test_ciphertext2
