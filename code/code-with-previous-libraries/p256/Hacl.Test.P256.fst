module Hacl.Test.P256

module ST = FStar.HyperStack.ST

open FStar.HyperStack.All

#set-options "--lax"

open FStar.Buffer

module P256 = Hacl.Impl.P256

val main: unit -> ST FStar.Int32.t
  (requires (fun h -> True))
  (ensures  (fun h0 r h1 -> True))
let main () =
  push_frame();

  // Base point for Nist-P256
  let px   = createL [0x6Buy; 0x17uy; 0xD1uy; 0xF2uy; 0xE1uy; 0x2Cuy; 0x42uy; 0x47uy;
                     0xF8uy; 0xBCuy; 0xE6uy; 0xE5uy; 0x63uy; 0xA4uy; 0x40uy; 0xF2uy;
                     0x77uy; 0x03uy; 0x7Duy; 0x81uy; 0x2Duy; 0xEBuy; 0x33uy; 0xA0uy;
                     0xF4uy; 0xA1uy; 0x39uy; 0x45uy; 0xD8uy; 0x98uy; 0xC2uy; 0x96uy] in

  let py = createL [0x4Fuy; 0xE3uy; 0x42uy; 0xE2uy; 0xFEuy; 0x1Auy; 0x7Fuy; 0x9Buy;
                   0x8Euy; 0xE7uy; 0xEBuy; 0x4Auy; 0x7Cuy; 0x0Fuy; 0x9Euy; 0x16uy;
                   0x2Buy; 0xCEuy; 0x33uy; 0x57uy; 0x6Buy; 0x31uy; 0x5Euy; 0xCEuy;
                   0xCBuy; 0xB6uy; 0x40uy; 0x68uy; 0x37uy; 0xBFuy; 0x51uy; 0xF5uy] in

  // Scratch point to store the result 
  let outx = create 0uy 32ul in
  let outy = create 0uy 32ul in

  // Test secret key
  let sk1 = createL [0x1uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy;
                    0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy;
                    0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy;
                    0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy ] in

  let sk2 = createL [0x2uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy;
                    0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy;
                    0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy;
                    0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy; 0x0uy ] in

  // Expected result (for sk = 2)
  let expectedx2 = createL [0x7Cuy; 0xF2uy; 0x7Buy; 0x18uy; 0x8Duy; 0x03uy; 0x4Fuy; 0x7Euy;
                     0x8Auy; 0x52uy; 0x38uy; 0x03uy; 0x04uy; 0xB5uy; 0x1Auy; 0xC3uy;
                     0xC0uy; 0x89uy; 0x69uy; 0xE2uy; 0x77uy; 0xF2uy; 0x1Buy; 0x35uy;
                     0xA6uy; 0x0Buy; 0x48uy; 0xFCuy; 0x47uy; 0x66uy; 0x99uy; 0x78uy] in
                     
  let expectedy2 = createL [0x07uy; 0x77uy; 0x55uy; 0x10uy; 0xDBuy; 0x8Euy; 0xD0uy; 0x40uy;
                     0x29uy; 0x3Duy; 0x9Auy; 0xC6uy; 0x9Fuy; 0x74uy; 0x30uy; 0xDBuy;
                     0xBAuy; 0x7Duy; 0xADuy; 0xE6uy; 0x3Cuy; 0xE9uy; 0x82uy; 0x29uy;
                     0x9Euy; 0x04uy; 0xB7uy; 0x9Duy; 0x22uy; 0x78uy; 0x73uy; 0xD1uy] in

   let sk3 = createL [0x03uy; 0x00uy; 0x00uy; 0x00uy; 0xc0uy; 0x07uy; 0x00uy; 0xfeuy; 
                      0x7fuy; 0xf0uy; 0xffuy; 0x03uy; 0x00uy; 0xf0uy; 0xffuy; 0x01uy; 
                      0xc0uy; 0x07uy; 0x00uy; 0xfeuy; 0xffuy; 0x03uy; 0x00uy; 0xfcuy; 
                      0xffuy; 0x01uy; 0xfeuy; 0xffuy; 0xffuy; 0xc1uy; 0xffuy; 0x41uy] in

  let expectedx3 = createL [0x9Euy; 0xACuy; 0xE8uy; 0xF4uy; 0xB0uy; 0x71uy; 0xE6uy; 0x77uy;
                            0xC5uy; 0x35uy; 0x0Buy; 0x02uy; 0xF2uy; 0xBBuy; 0x2Buy; 0x38uy;
                            0x4Auy; 0xAEuy; 0x89uy; 0xD5uy; 0x8Auy; 0xA7uy; 0x2Cuy; 0xA9uy;
                            0x7Auy; 0x17uy; 0x05uy; 0x72uy; 0xE0uy; 0xFBuy; 0x22uy; 0x2Fuy] in
                     
  let expectedy3 = createL [0x1Buy; 0xBDuy; 0xAEuy; 0xC2uy; 0x43uy; 0x0Buy; 0x09uy; 0xB9uy;
                            0x3Fuy; 0x7Cuy; 0xB0uy; 0x86uy; 0x78uy; 0x63uy; 0x6Cuy; 0xE1uy;
                            0x2Euy; 0xAAuy; 0xFDuy; 0x58uy; 0x39uy; 0x06uy; 0x99uy; 0xB5uy;
                            0xFDuy; 0x2Fuy; 0x6Euy; 0x11uy; 0x88uy; 0xFCuy; 0x2Auy; 0x78uy] in

  let sk4 = createL [0xffuy; 0xf3uy; 0xffuy; 0xffuy; 0xffuy; 0x00uy; 0x0euy; 0x00uy;
                     0x00uy; 0x00uy; 0x10uy; 0x00uy; 0x00uy; 0x07uy; 0x00uy; 0x00uy;
                     0x00uy; 0x00uy; 0xffuy; 0x7fuy; 0x00uy; 0xfcuy; 0xffuy; 0xffuy;
                     0x03uy; 0xc0uy; 0xffuy; 0x3fuy; 0xc0uy; 0xffuy; 0xffuy;0x7fuy] in

  let expectedx4 = createL [0x87uy; 0x8Fuy; 0x22uy; 0xCCuy; 0x6Duy; 0xB6uy; 0x04uy; 0x8Duy;
                            0x2Buy; 0x76uy; 0x72uy; 0x68uy; 0xF2uy; 0x2Fuy; 0xFAuy; 0xD8uy;
                            0xE5uy; 0x6Auy; 0xB8uy; 0xE2uy; 0xDCuy; 0x61uy; 0x5Fuy; 0x7Buy;
                            0xD8uy; 0x9Fuy; 0x1Euy; 0x35uy; 0x05uy; 0x00uy; 0xDDuy; 0x8Duy] in
                     
  let expectedy4 = createL [0x71uy; 0x4Auy; 0x5Duy; 0x7Buy; 0xB9uy; 0x01uy; 0xC9uy; 0xC5uy;
                            0x85uy; 0x34uy; 0x00uy; 0xD1uy; 0x23uy; 0x41uy; 0xA8uy; 0x92uy;
                            0xEFuy; 0x45uy; 0xD8uy; 0x7Fuy; 0xC5uy; 0x53uy; 0x78uy; 0x67uy;
                            0x56uy; 0xC4uy; 0xF0uy; 0xC9uy; 0x39uy; 0x1Duy; 0x76uy; 0x3Euy] in

  // Test for k = 1
  P256.p256 outx outy px py sk1;
  TestLib.compare_and_print (C.string_of_literal "P256 test vector x coord") px outx 32ul;
  TestLib.compare_and_print (C.string_of_literal "P256 test vector y coord") py outy 32ul;

  // Test for k = 2
  P256.p256 outx outy px py sk2;
  TestLib.compare_and_print (C.string_of_literal "P256 test vector x coord") expectedx2 outx 32ul;
  TestLib.compare_and_print (C.string_of_literal "P256 test vector y coord") expectedy2 outy 32ul;

  // Test for k = 29852220098221261079183923314599206100666902414330245206392788703677545185283
  P256.p256 outx outy px py sk3;
  TestLib.compare_and_print (C.string_of_literal "P256 test vector x coord") expectedx3 outx 32ul;
  TestLib.compare_and_print (C.string_of_literal "P256 test vector y coord") expectedy3 outy 32ul;

  // Test for k = 57896042899961394862005778464643882389978449576758748073725983489954366354431
  P256.p256 outx outy px py sk4;
  TestLib.compare_and_print (C.string_of_literal "P256 test vector x coord") expectedx4 outx 32ul;
  TestLib.compare_and_print (C.string_of_literal "P256 test vector y coord") expectedy4 outy 32ul;

  pop_frame();
  0l
