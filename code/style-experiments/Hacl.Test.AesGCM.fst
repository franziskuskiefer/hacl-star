module Hacl.Test.AesGCM
open FStar.HyperStack.All

#set-options "--lax"

open LowStar.Buffer
open Lib.IntTypes

val main: unit -> ST C.exit_code
  (requires (fun h -> True))
  (ensures  (fun h0 r h1 -> True))
let main () =
  push_frame();

  
  let key0 = alloca_of_list
  [
  0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy
] in
  let iv0 = alloca_of_list
  [
  0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy
    ] in
  let input0 = alloca_of_list [
    ] in
  let cip0 = alloca_of_list
[
  0x58uy; 0xe2uy; 0xfcuy; 0xceuy; 0xfauy; 0x7euy; 0x30uy; 0x61uy; 0x36uy; 0x7fuy; 0x1duy; 0x57uy; 0xa4uy; 0xe7uy; 0x45uy; 0x5auy
  ] in
  let comp0 = alloca 0uy 16ul in

  let ctx = alloca Lib.Vec128.vec128_zero 22ul in
  Hacl.Impl.AesGCM.aes128_gcm_init ctx key0 iv0;
  Hacl.Impl.AesGCM.aes128_gcm_encrypt ctx comp0 input0 (size 0) cip0 (size 0);
  TestLib.compare_and_print (C.String.of_literal "AES-GCM NI encryption 0") cip0 comp0 16ul;

  let key1 = alloca_of_list
  [
0xfeuy; 0xffuy; 0xe9uy; 0x92uy; 0x86uy; 0x65uy; 0x73uy; 0x1cuy; 0x6duy; 0x6auy; 0x8fuy; 0x94uy; 0x67uy; 0x30uy; 0x83uy; 0x08uy
] in
  let iv1 = alloca_of_list
  [
0xcauy;0xfeuy;0xbauy;0xbeuy;0xfauy;0xceuy;0xdbuy;0xaduy;0xdeuy;0xcauy;0xf8uy;0x88uy
    ] in
  let input1 = alloca_of_list [
0xd9uy; 0x31uy; 0x32uy; 0x25uy; 0xf8uy; 0x84uy; 0x06uy; 0xe5uy; 0xa5uy; 0x59uy; 0x09uy; 0xc5uy; 0xafuy; 0xf5uy; 0x26uy; 0x9auy; 0x86uy; 0xa7uy; 0xa9uy; 0x53uy; 0x15uy; 0x34uy; 0xf7uy; 0xdauy; 0x2euy; 0x4cuy; 0x30uy; 0x3duy; 0x8auy; 0x31uy; 0x8auy; 0x72uy; 0x1cuy; 0x3cuy; 0x0cuy; 0x95uy; 0x95uy; 0x68uy; 0x09uy; 0x53uy; 0x2fuy; 0xcfuy; 0x0euy; 0x24uy; 0x49uy; 0xa6uy; 0xb5uy; 0x25uy; 0xb1uy; 0x6auy; 0xeduy; 0xf5uy; 0xaauy; 0x0duy; 0xe6uy; 0x57uy; 0xbauy; 0x63uy; 0x7buy; 0x39uy
    ] in
  let aad1 = alloca_of_list [
0xfeuy; 0xeduy; 0xfauy; 0xceuy; 0xdeuy; 0xaduy; 0xbeuy; 0xefuy; 0xfeuy; 0xeduy; 0xfauy; 0xceuy; 0xdeuy; 0xaduy; 0xbeuy; 0xefuy; 0xabuy; 0xaduy; 0xdauy; 0xd2uy
] in
  let cip1 = alloca_of_list
[
0x42uy; 0x83uy; 0x1euy; 0xc2uy; 0x21uy; 0x77uy; 0x74uy; 0x24uy; 0x4buy; 0x72uy; 0x21uy; 0xb7uy; 0x84uy; 0xd0uy; 0xd4uy; 0x9cuy; 0xe3uy; 0xaauy; 0x21uy; 0x2fuy; 0x2cuy; 0x02uy; 0xa4uy; 0xe0uy; 0x35uy; 0xc1uy; 0x7euy; 0x23uy; 0x29uy; 0xacuy; 0xa1uy; 0x2euy; 0x21uy; 0xd5uy; 0x14uy; 0xb2uy; 0x54uy; 0x66uy; 0x93uy; 0x1cuy; 0x7duy; 0x8fuy; 0x6auy; 0x5auy; 0xacuy; 0x84uy; 0xaauy; 0x05uy; 0x1buy; 0xa3uy; 0x0buy; 0x39uy; 0x6auy; 0x0auy; 0xacuy; 0x97uy; 0x3duy; 0x58uy; 0xe0uy; 0x91uy; 0x5buy; 0xc9uy; 0x4fuy; 0xbcuy; 0x32uy; 0x21uy; 0xa5uy; 0xdbuy; 0x94uy; 0xfauy; 0xe9uy; 0x5auy; 0xe7uy; 0x12uy; 0x1auy; 0x47uy

  ] in
  let comp1 = alloca 0uy 76ul in
  let ctx = alloca Lib.Vec128.vec128_zero 22ul in
  Hacl.Impl.AesGCM.aes128_gcm_init ctx key1 iv1;
  Hacl.Impl.AesGCM.aes128_gcm_encrypt ctx comp1 input1 (size 60) aad1 (size 20);
//  Hacl.Impl.AesGCM.aes128_gcm_encrypt comp1 input1 (size 60) aad1 (size 20) key1 iv1;
  TestLib.compare_and_print (C.String.of_literal "AES-GCM NI encryption 1") cip1 comp1 76ul;

  pop_frame();
  C.EXIT_SUCCESS
