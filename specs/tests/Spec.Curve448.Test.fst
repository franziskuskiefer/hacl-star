module Spec.Curve448.Test

open Lib.IntTypes
open Lib.RawIntTypes
open Lib.Sequence
open Lib.ByteSequence
open Spec.Curve448

(* ********************* *)
(* RFC 7748 Test Vectors *)
(* ********************* *)

let scalar1 = List.Tot.map u8_from_UInt8 [
  0x3duy; 0x26uy; 0x2fuy; 0xdduy; 0xf9uy; 0xecuy; 0x8euy; 0x88uy;
  0x49uy; 0x52uy; 0x66uy; 0xfeuy; 0xa1uy; 0x9auy; 0x34uy; 0xd2uy;
  0x88uy; 0x82uy; 0xacuy; 0xefuy; 0x04uy; 0x51uy; 0x04uy; 0xd0uy;
  0xd1uy; 0xaauy; 0xe1uy; 0x21uy; 0x70uy; 0x0auy; 0x77uy; 0x9cuy;
  0x98uy; 0x4cuy; 0x24uy; 0xf8uy; 0xcduy; 0xd7uy; 0x8fuy; 0xbfuy;
  0xf4uy; 0x49uy; 0x43uy; 0xebuy; 0xa3uy; 0x68uy; 0xf5uy; 0x4buy;
  0x29uy; 0x25uy; 0x9auy; 0x4fuy; 0x1cuy; 0x60uy; 0x0auy; 0xd3uy
]

let scalar2 = List.Tot.map u8_from_UInt8 [
  0x20uy; 0x3duy; 0x49uy; 0x44uy; 0x28uy; 0xb8uy; 0x39uy; 0x93uy;
  0x52uy; 0x66uy; 0x5duy; 0xdcuy; 0xa4uy; 0x2fuy; 0x9duy; 0xe8uy;
  0xfeuy; 0xf6uy; 0x00uy; 0x90uy; 0x8euy; 0x0duy; 0x46uy; 0x1cuy;
  0xb0uy; 0x21uy; 0xf8uy; 0xc5uy; 0x38uy; 0x34uy; 0x5duy; 0xd7uy;
  0x7cuy; 0x3euy; 0x48uy; 0x06uy; 0xe2uy; 0x5fuy; 0x46uy; 0xd3uy;
  0x31uy; 0x5cuy; 0x44uy; 0xe0uy; 0xa5uy; 0xb4uy; 0x37uy; 0x12uy;
  0x82uy; 0xdduy; 0x2cuy; 0x8duy; 0x5buy; 0xe3uy; 0x09uy; 0x5fuy
]

let input1 = List.Tot.map u8_from_UInt8 [
  0x06uy; 0xfcuy; 0xe6uy; 0x40uy; 0xfauy; 0x34uy; 0x87uy; 0xbfuy;
  0xdauy; 0x5fuy; 0x6cuy; 0xf2uy; 0xd5uy; 0x26uy; 0x3fuy; 0x8auy;
  0xaduy; 0x88uy; 0x33uy; 0x4cuy; 0xbduy; 0x07uy; 0x43uy; 0x7fuy;
  0x02uy; 0x0fuy; 0x08uy; 0xf9uy; 0x81uy; 0x4duy; 0xc0uy; 0x31uy;
  0xdduy; 0xbduy; 0xc3uy; 0x8cuy; 0x19uy; 0xc6uy; 0xdauy; 0x25uy;
  0x83uy; 0xfauy; 0x54uy; 0x29uy; 0xdbuy; 0x94uy; 0xaduy; 0xa1uy;
  0x8auy; 0xa7uy; 0xa7uy; 0xfbuy; 0x4euy; 0xf8uy; 0xa0uy; 0x86uy
]

let input2 = List.Tot.map u8_from_UInt8 [
  0x0fuy; 0xbcuy; 0xc2uy; 0xf9uy; 0x93uy; 0xcduy; 0x56uy; 0xd3uy;
  0x30uy; 0x5buy; 0x0buy; 0x7duy; 0x9euy; 0x55uy; 0xd4uy; 0xc1uy;
  0xa8uy; 0xfbuy; 0x5duy; 0xbbuy; 0x52uy; 0xf8uy; 0xe9uy; 0xa1uy;
  0xe9uy; 0xb6uy; 0x20uy; 0x1buy; 0x16uy; 0x5duy; 0x01uy; 0x58uy;
  0x94uy; 0xe5uy; 0x6cuy; 0x4duy; 0x35uy; 0x70uy; 0xbeuy; 0xe5uy;
  0x2fuy; 0xe2uy; 0x05uy; 0xe2uy; 0x8auy; 0x78uy; 0xb9uy; 0x1cuy;
  0xdfuy; 0xbduy; 0xe7uy; 0x1cuy; 0xe8uy; 0xd1uy; 0x57uy; 0xdbuy
]

let expected1 = List.Tot.map u8_from_UInt8 [
  0xceuy; 0x3euy; 0x4fuy; 0xf9uy; 0x5auy; 0x60uy; 0xdcuy; 0x66uy;
  0x97uy; 0xdauy; 0x1duy; 0xb1uy; 0xd8uy; 0x5euy; 0x6auy; 0xfbuy;
  0xdfuy; 0x79uy; 0xb5uy; 0x0auy; 0x24uy; 0x12uy; 0xd7uy; 0x54uy;
  0x6duy; 0x5fuy; 0x23uy; 0x9fuy; 0xe1uy; 0x4fuy; 0xbauy; 0xaduy;
  0xebuy; 0x44uy; 0x5fuy; 0xc6uy; 0x6auy; 0x01uy; 0xb0uy; 0x77uy;
  0x9duy; 0x98uy; 0x22uy; 0x39uy; 0x61uy; 0x11uy; 0x1euy; 0x21uy;
  0x76uy; 0x62uy; 0x82uy; 0xf7uy; 0x3duy; 0xd9uy; 0x6buy; 0x6fuy
]

let expected2 = List.Tot.map u8_from_UInt8 [
  0x88uy; 0x4auy; 0x02uy; 0x57uy; 0x62uy; 0x39uy; 0xffuy; 0x7auy;
  0x2fuy; 0x2fuy; 0x63uy; 0xb2uy; 0xdbuy; 0x6auy; 0x9fuy; 0xf3uy;
  0x70uy; 0x47uy; 0xacuy; 0x13uy; 0x56uy; 0x8euy; 0x1euy; 0x30uy;
  0xfeuy; 0x63uy; 0xc4uy; 0xa7uy; 0xaduy; 0x1buy; 0x3euy; 0xe3uy;
  0xa5uy; 0x70uy; 0x0duy; 0xf3uy; 0x43uy; 0x21uy; 0xd6uy; 0x20uy;
  0x77uy; 0xe6uy; 0x36uy; 0x33uy; 0xc5uy; 0x75uy; 0xc1uy; 0xc9uy;
  0x54uy; 0x51uy; 0x4euy; 0x99uy; 0xdauy; 0x7cuy; 0x17uy; 0x9duy
]

let test () =
  assert_norm(List.Tot.length scalar1 = 56);
  assert_norm(List.Tot.length scalar2 = 56);
  assert_norm(List.Tot.length input1 = 56);
  assert_norm(List.Tot.length input2 = 56);
  assert_norm(List.Tot.length expected1 = 56);
  assert_norm(List.Tot.length expected2 = 56);
  let scalar1 = of_list scalar1 in
  let scalar2 = of_list scalar2 in
  let input1 = of_list input1 in
  let input2 = of_list input2 in
  let expected1 : lseq uint8 56 = of_list expected1 in
  let expected2 : lseq uint8 56 = of_list expected2 in
  let computed1 : lseq uint8 56 = scalarmult scalar1 input1 in
  let computed2 : lseq uint8 56 = scalarmult scalar2 input2 in
  let result1 : bool = for_all2 (fun a b -> uint_to_nat #U8 a = uint_to_nat #U8 b) computed1 expected1 in
  let result2 : bool = for_all2 (fun a b -> uint_to_nat #U8 a = uint_to_nat #U8 b) computed2 expected2 in
  IO.print_string   "Expected Shared Secret:";
  List.iter (fun a -> IO.print_string (UInt8.to_string (u8_to_UInt8 a))) (to_list expected1);
  IO.print_string "\nComputed Shared Secret:";
  List.iter (fun a -> IO.print_string (UInt8.to_string (u8_to_UInt8 a))) (to_list computed1);
  if result1 then   IO.print_string "\nSuccess!\n"
  else IO.print_string "\nFailure :(\n";
  IO.print_string   "Expected Shared Secret:";
  List.iter (fun a -> IO.print_string (UInt8.to_string (u8_to_UInt8 a))) (to_list expected2);
  IO.print_string "\nComputed Shared Secret:";
  List.iter (fun a -> IO.print_string (UInt8.to_string (u8_to_UInt8 a))) (to_list computed2);
  if result2 then   IO.print_string "\nSuccess!\n"
  else IO.print_string "\nFailure :(\n"
