include "../../../arch/x64/X64.Vale.InsBasic.vaf"
include "../../../arch/x64/X64.Vale.InsMem.vaf"
include "../../../arch/x64/X64.Vale.InsVector.vaf"
include "../../../arch/x64/X64.Vale.InsAes.vaf"
include{:fstar}{:open} "Prop_s"
include{:fstar}{:open} "Opaque_s"
include{:fstar}{:open} "Words_s"
include{:fstar}{:open} "Types_s"
include{:/*TODO*/fstar}{:open} "FStar.Seq.Base"
include{:fstar}{:open} "AES_s"
include{:fstar}{:open} "X64.Machine_s"
include{:fstar}{:open} "X64.Memory"
include{:fstar}{:open} "X64.Vale.State"
include{:fstar}{:open} "X64.Vale.Decls"
include{:fstar}{:open} "X64.Vale.QuickCode"
include{:fstar}{:open} "X64.Vale.QuickCodes"
include{:fstar}{:open} "Arch.Types"
include{:fstar}{:open} "AES_helpers"
//include{:fstar}{:open} "X64.Poly1305.Math"
include{:fstar}{:open} "GCM_helpers"
include{:fstar}{:open} "Workarounds"
include{:fstar}{:open} "GCTR_s"
include{:fstar}{:open} "GCTR"
include{:fstar}{:open} "Arch.TypesNative"
include{:fstar}{:open} "X64.CPU_Features_s"

module X64.AESopt

#verbatim{:interface}{:implementation}
open Prop_s
open Opaque_s
open Words_s
open Types_s
open FStar.Seq
open AES_s
open X64.Machine_s
open X64.Memory
open X64.Vale.State
open X64.Vale.Decls
open X64.Vale.InsBasic
open X64.Vale.InsMem
open X64.Vale.InsVector
open X64.Vale.InsAes
open X64.Vale.QuickCode
open X64.Vale.QuickCodes
open Arch.Types
open AES_helpers
//open X64.Poly1305.Math    // For lemma_poly_bits64()
open GCM_helpers
open Workarounds
open GCTR_s
open GCTR
open Arch.TypesNative
open X64.CPU_Features_s

module GCTR = GCTR
#endverbatim

#verbatim{:interface}
let aes_reqs
  (alg:algorithm) (key:seq nat32) (round_keys:seq quad32) (keys_b:buffer128)
  (key_ptr:int) (mem:memory) (memTaint:memtaint) : prop0
  =
  aesni_enabled /\
  alg = AES_128 /\
  //(alg = AES_128 || alg = AES_256) /\
  is_aes_key_LE alg key /\
  length(round_keys) == nr(alg) + 1 /\
  round_keys == key_to_round_keys_LE alg key /\

  //validSrcAddrsOffset128 mem key_ptr keys_b 8 (nr alg + 1) memTaint Secret /\
  // Can't use the standard Offset, since that makes the size too large and conflicts
  // with the spec below that says the entire keys_b is exactly round_keys
  buffer_readable mem keys_b /\
  (nr alg + 1) <= buffer_length keys_b /\
  buffer_addr keys_b mem + 16 `op_Multiply` 8 == key_ptr /\
  valid_taint_buf128 keys_b mem memTaint Secret /\

  buffer128_as_seq mem keys_b == round_keys
#endverbatim
function aes_reqs(alg:algorithm, key:seq(nat32), round_keys:seq(quad32), keys_b:buffer128,
    key_ptr:int, mem:memory, memTaint:memtaint) : prop extern;

ghost procedure finish_aes_encrypt_le(ghost alg:algorithm, ghost input_LE:quad32, ghost key:seq(nat32))
    requires
        is_aes_key_LE(alg, key);
    ensures
        aes_encrypt_le(alg, key, input_LE) == cipher_opaque(alg, input_LE, key_to_round_keys_LE(alg, key));
{
    reveal aes_encrypt_LE_def;
    reveal cipher;
}

procedure {:quick exportOnly} Load_two_lsb(inout dst:xmm)
    lets constp @= r11; 
    modifies constp; efl;
    ensures  dst == Mkfour(2, 0, 0, 0);
{
    ZeroXmm(dst);
    lemma_insert_nat64_nat32s(dst, 2, 0);
    assert two_to_nat32(Mktwo(2, 0)) == 0x2; // OBSERVE
    PinsrqImm(dst, 2, 0, constp);
}

// Version with concrete values succeeds.
//procedure {:quick} Load_one_lsb()
//    lets constp @= r11; dst @= xmm1;
//    modifies constp; dst; efl;
//    ensures  dst == Mkfour(1, 0, 0, 0);
//{
//    ZeroXmm(dst);
//    assert two_to_nat32(Mktwo(1, 0)) == 0x1; // OBSERVE
//    PinsrqImm(dst, 1, 0, constp);
//    reveal insert_nat64;
//}

procedure {:quick exportOnly} Load_one_lsb(inout dst:xmm)
    lets constp @= r11; 
    modifies constp; efl;
    ensures  dst == Mkfour(1, 0, 0, 0);
{
    ZeroXmm(dst);
    lemma_insert_nat64_nat32s(dst, 1, 0);
    assert two_to_nat32(Mktwo(1, 0)) == 0x1; // OBSERVE
    PinsrqImm(dst, 1, 0, constp);
}

#reset-options "--z3rlimit 20"
procedure {:quick} Handle_ctr32(
    ghost ctr_BE:quad32
    )
    lets
        Ii @= xmm0; T1 @= xmm1; T2 @= xmm2;
        Z1 @= xmm5; Z2 @= xmm6; 
        inout1 @= xmm10; inout2 @= xmm11; inout3 @= xmm12;
        inout4 @= xmm13; inout5 @= xmm14; rndkey @= xmm15;
        constp @= r11;
    reads
        rndkey;

    modifies
        constp;
        Ii; T1; T2; Z1; Z2; inout1; inout2; inout3; inout4; inout5; 
        efl;

    requires
        T1 == reverse_bytes_quad32(ctr_BE);
    ensures
        inout1 == quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 1)), rndkey);
        inout2 == quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 2)), rndkey);
        inout3 ==            reverse_bytes_quad32(inc32lite(ctr_BE, 3));
        inout4 ==            reverse_bytes_quad32(inc32lite(ctr_BE, 4));
        inout5 ==            reverse_bytes_quad32(inc32lite(ctr_BE, 5));
        T1     ==            reverse_bytes_quad32(inc32lite(ctr_BE, 6));
{
    InitPshufbMask(Ii, constp);  // # borrow $Ii for .Lbswap_mask
    VPshufb(Z2, T1, Ii);         // # byte-swap counter
    // OpenSSL uses a memory operand with VPaddd to do the addition with .Lone_lsb.  We avoid that here for now.
    //Load_two_lsb();              // # borrow $Z1, .Ltwo_lsb
    //Load_one_lsb();              // # .Lone_lsb
    Load_one_lsb(Z1);
    VPaddd(inout1, Z2, Z1);
    Load_two_lsb(Z1);              
    VPaddd(inout2, Z2, Z1);
    VPaddd(inout3, inout1, Z1);
    VPshufb(inout1, inout1, Ii);
    VPaddd(inout4, inout2, Z1);
    VPshufb(inout2, inout2, Ii);
    VPxor(inout1, inout1, rndkey);
    VPaddd(inout5, inout3, Z1);
    VPshufb(inout3, inout3, Ii);
    VPxor(inout2, inout2, rndkey);
    VPaddd(T1, inout4, Z1);         // # byte-swapped next counter value
    VPshufb(inout4, inout4, Ii);
    VPshufb(inout5, inout5, Ii);
    VPshufb(T1, T1, Ii);            // # next counter value
}

#reset-options "--z3rlimit 20"
procedure {:quick} Loop6x_ctr_update(
    inline alg:algorithm,  
    ghost key_words:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128,

    ghost ctr_BE:quad32
    )
    lets
//      inp @= rdi; outp @= rsi; len @= rdx; key @= rcx; ivp @= r8; Xip @= r9;
        key @= rcx; 
        Ii @= xmm0; T1 @= xmm1; T2 @= xmm2;
        Z1 @= xmm5; Z2 @= xmm6; 
        inout0 @= xmm9; inout1 @= xmm10; inout2 @= xmm11; inout3 @= xmm12;
        inout4 @= xmm13; inout5 @= xmm14; rndkey @= xmm15;
//      counter @= rbx; rounds @= rbp; ret @= r10; constp @= r11; in0 @= r14; end0 @= r15;
        counter @= rbx; constp @= r11; 
    reads
        key; rndkey;

    modifies
        counter; constp;
        Ii; T1; T2; Z1; Z2; inout0; inout1; inout2; inout3; inout4; inout5; 
        efl;

    requires
        // AES reqs
        aes_reqs(alg, key_words, round_keys, keys_b, key, mem, memTaint);
        //rndkey == index(round_keys, 0);

        // Counter requirements
        T2 == Mkfour(0, 0, 0, 0x1000000);

        T1 == reverse_bytes_quad32(inc32lite(ctr_BE, 0));
        //0 <= counter < 256;  // Implied by next line
        counter == ctr_BE.lo0 % 256;

        //inout5.hi3 + 0x1000000 < pow2_32;

        inout0 == quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 0)), rndkey);   

        counter + 6 < 256 ==> inout1 == reverse_bytes_quad32(inc32lite(ctr_BE, 1));
        counter + 6 < 256 ==> inout2 == reverse_bytes_quad32(inc32lite(ctr_BE, 2));
        counter + 6 < 256 ==> inout3 == reverse_bytes_quad32(inc32lite(ctr_BE, 3));
        counter + 6 < 256 ==> inout4 == reverse_bytes_quad32(inc32lite(ctr_BE, 4));
        counter + 6 < 256 ==> inout5 == reverse_bytes_quad32(inc32lite(ctr_BE, 5));
    ensures
        T1 == reverse_bytes_quad32(inc32lite(ctr_BE, 6));
        0 <= counter < 256;
        counter == inc32lite(ctr_BE, 6).lo0 % 256;

        inout0 == quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 0)), rndkey);
        inout1 == quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 1)), rndkey);
        inout2 == quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 2)), rndkey);

        inout3 == reverse_bytes_quad32(inc32lite(ctr_BE, 3));
        inout4 == reverse_bytes_quad32(inc32lite(ctr_BE, 4));
        inout5 == reverse_bytes_quad32(inc32lite(ctr_BE, 5));
{
    // OpenSSL does this with "add `6<<24`,counter", followed by jc, 
    // which handles wrap and control flow more efficiently
    Add64(counter, 6);      
    if (counter >= 256) {
        Handle_ctr32(ctr_BE); //, counter);
        Sub64(counter, 256);
    } else {
        VPaddd(T1, T2, inout5); // OpenSSL uses VPaddb
        VPxor(inout1, inout1, rndkey); 
        VPxor(inout2, inout2, rndkey); 
        lemma_msb_in_bounds(ctr_BE, inout5, T1, old(counter));
    }
}

#reset-options ""
procedure {:quick} Loop6x_preamble(
    inline alg:algorithm,  // OpenSSL includes the number of rounds (nr) as a dynamic parameter (stored with the key).  Saves code space but adds extra instructions to the fast path.  Maybe branch predictor is good enough for it not to matter
    ghost iv_b:buffer128,

    ghost key_words:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128,

    ghost ctr_BE:quad32
    )
    lets
//      inp @= rdi; outp @= rsi; len @= rdx; key @= rcx; ivp @= r8; Xip @= r9;
        key @= rcx; ivp @= r8; 
        Ii @= xmm0; T1 @= xmm1; T2 @= xmm2;
        Z1 @= xmm5; Z2 @= xmm6; 
        inout0 @= xmm9; inout1 @= xmm10; inout2 @= xmm11; inout3 @= xmm12;
        inout4 @= xmm13; inout5 @= xmm14; rndkey @= xmm15;
//      counter @= rbx; rounds @= rbp; ret @= r10; constp @= r11; in0 @= r14; end0 @= r15;
        counter @= rbx; constp @= r11; 
    reads
        key; ivp;
        rndkey;
        memTaint;

    modifies
        counter; constp;
        Ii; T1; T2; Z1; Z2; inout0; inout1; inout2; inout3; inout4; inout5; 
        mem; efl;

    requires
        // Valid ptrs and buffers
        validDstAddrs128(mem, ivp, iv_b, 1, memTaint, Secret);
        buffers_disjoint128(iv_b, keys_b);

        // AES reqs
        aes_reqs(alg, key_words, round_keys, keys_b, key, mem, memTaint);
        rndkey == index(round_keys, 0);

        // Counter requirements
        T2 == Mkfour(0, 0, 0, 0x1000000);

        T1 == reverse_bytes_quad32(inc32lite(ctr_BE, 0));
        counter == ctr_BE.lo0 % 256;

        inout0 == quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 0)), rndkey);   

        counter + 6 < 256 ==> inout1 == reverse_bytes_quad32(inc32lite(ctr_BE, 1));
        counter + 6 < 256 ==> inout2 == reverse_bytes_quad32(inc32lite(ctr_BE, 2));
        counter + 6 < 256 ==> inout3 == reverse_bytes_quad32(inc32lite(ctr_BE, 3));
        counter + 6 < 256 ==> inout4 == reverse_bytes_quad32(inc32lite(ctr_BE, 4));
        counter + 6 < 256 ==> inout5 == reverse_bytes_quad32(inc32lite(ctr_BE, 5));

    ensures
        // Framing
        modifies_buffer_specific128(iv_b, old(mem), mem, 0, 0);

        // Semantics

        // IO
        inout0 == rounds_opaque(old(inout0), round_keys, 1);
        inout1 == rounds_opaque(quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 1)), rndkey), round_keys, 1);
        inout2 == rounds_opaque(quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 2)), rndkey), round_keys, 1);
        inout3 == rounds_opaque(quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 3)), rndkey), round_keys, 1);
        inout4 == rounds_opaque(quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 4)), rndkey), round_keys, 1);
        inout5 == rounds_opaque(quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 5)), rndkey), round_keys, 1);

        // Next counter
        buffer128_read(iv_b, 0, mem) == reverse_bytes_quad32(inc32lite(ctr_BE, 6));

        // Counter details
        0 <= counter < 256;
        counter == inc32lite(ctr_BE, 6).lo0 % 256;
{
    Loop6x_ctr_update(alg, key_words, round_keys, keys_b, ctr_BE);

    init_rounds_opaque(inout0, round_keys);
    init_rounds_opaque(inout1, round_keys);
    init_rounds_opaque(inout2, round_keys);

    /*
    init_rounds_opaque(inout0, round_keys);

    if (key > 72) {         // TODO: FIX!
        Handle_ctr32(ctr_BE);
    } else {
        VPaddd(T1, T2, inout5); // OpenSSL uses VPaddb
        VPxor(inout1, inout1, rndkey); 
        VPxor(inout2, inout2, rndkey); 
        lemma_incr_msb(inc32lite(ctr_BE, 5), old(inout5), T1, 1);
    }
    init_rounds_opaque(inout1, round_keys);
    init_rounds_opaque(inout2, round_keys);
    */

    Store128_buffer(ivp, T1, 0, Secret, iv_b, 0);   // # save next counter value
    VPxor(inout3, inout3, rndkey); init_rounds_opaque(inout3, round_keys);
    Load128_buffer(T2, key, 0x10-0x80, Secret, keys_b, 1); // # borrow $T2 for $rndkey

    VAESNI_enc(inout0, inout0, T2);
    VPxor(inout4, inout4, rndkey); init_rounds_opaque(inout4, round_keys);
    VAESNI_enc(inout1, inout1, T2);
    VPxor(inout5, inout5, rndkey); init_rounds_opaque(inout5, round_keys);
    VAESNI_enc(inout2, inout2, T2);
    VAESNI_enc(inout3, inout3, T2);
    VAESNI_enc(inout4, inout4, T2);
    //Load128_buffer(rndkey, key, 0x20-0x80, Secret, keys_b, 2);      // OpenSSL had this here.  I moved it to one of the Loop6x_step calls
    VAESNI_enc(inout5, inout5, T2);

    reveal rounds;
    commute_sub_bytes_shift_rows_forall();

}

#reset-options ""

procedure {:quick} Loop6x_plain(
    inline alg:algorithm,  // OpenSSL includes the number of rounds (nr) as a dynamic parameter (stored with the key).  Saves code space but adds extra instructions to the fast path.  Maybe branch predictor is good enough for it not to matter
    inline rnd:nat,
    ghost key_words:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128,

    ghost init0:quad32,
    ghost init1:quad32,
    ghost init2:quad32,
    ghost init3:quad32,
    ghost init4:quad32,
    ghost init5:quad32
    )
    lets
//      inp @= rdi; outp @= rsi; len @= rdx; key @= rcx; ivp @= r8; Xip @= r9;
        key @= rcx; 
        inout0 @= xmm9; inout1 @= xmm10; inout2 @= xmm11; inout3 @= xmm12;
        inout4 @= xmm13; inout5 @= xmm14; rndkey @= xmm15;
//      counter @= rbx; rounds @= rbp; ret @= r10; constp @= r11; in0 @= r14; end0 @= r15;

    reads
        key; 
        mem; memTaint;

    modifies
        inout0; inout1; inout2; inout3; inout4; inout5; rndkey;
        efl;

    requires
        // AES reqs
        aes_reqs(alg, key_words, round_keys, keys_b, key, mem, memTaint);
        rnd + 1 < length(round_keys);

        inout0 == rounds_opaque(init0, round_keys, rnd);
        inout1 == rounds_opaque(init1, round_keys, rnd);
        inout2 == rounds_opaque(init2, round_keys, rnd);
        inout3 == rounds_opaque(init3, round_keys, rnd);
        inout4 == rounds_opaque(init4, round_keys, rnd);
        inout5 == rounds_opaque(init5, round_keys, rnd);

    ensures
        inout0 == rounds_opaque(init0, round_keys, rnd + 1);
        inout1 == rounds_opaque(init1, round_keys, rnd + 1);
        inout2 == rounds_opaque(init2, round_keys, rnd + 1);
        inout3 == rounds_opaque(init3, round_keys, rnd + 1);
        inout4 == rounds_opaque(init4, round_keys, rnd + 1);
        inout5 == rounds_opaque(init5, round_keys, rnd + 1);
{
    Load128_buffer(rndkey, key, 16*(rnd+1)-0x80, Secret, keys_b, rnd+1);

    VAESNI_enc(inout0, inout0, rndkey);
    VAESNI_enc(inout1, inout1, rndkey);
    VAESNI_enc(inout2, inout2, rndkey);
    VAESNI_enc(inout3, inout3, rndkey);
    VAESNI_enc(inout4, inout4, rndkey);
    VAESNI_enc(inout5, inout5, rndkey);

    reveal rounds;
    commute_sub_bytes_shift_rows_forall();
}


procedure {:quick} Loop6x_step(
    inline alg:algorithm,  // OpenSSL includes the number of rounds (nr) as a dynamic parameter (stored with the key).  Saves code space but adds extra instructions to the fast path.  Maybe branch predictor is good enough for it not to matter
    inline rnd:nat,
    inline in0_offset:nat,
    inline stack_offset:nat,
    ghost count:nat,
    ghost in0_b:buffer128,
    ghost stack_b:buffer128,

    ghost key_words:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128,

    ghost init0:quad32,
    ghost init1:quad32,
    ghost init2:quad32,
    ghost init3:quad32,
    ghost init4:quad32,
    ghost init5:quad32
    )
    lets
//      inp @= rdi; outp @= rsi; len @= rdx; key @= rcx; ivp @= r8; Xip @= r9;
        key @= rcx; 
        inout0 @= xmm9; inout1 @= xmm10; inout2 @= xmm11; inout3 @= xmm12;
        inout4 @= xmm13; inout5 @= xmm14; rndkey @= xmm15;
//      counter @= rbx; rounds @= rbp; ret @= r10; constp @= r11; in0 @= r14; end0 @= r15;
        in0 @= r14; 

    reads
        key; rsp; in0;
        memTaint;

    modifies
        r12; r13; 
        inout0; inout1; inout2; inout3; inout4; inout5; rndkey;
        mem; efl;

    requires
        count >= 2;

        // Valid ptrs and buffers
        validSrcAddrsOffset128(mem, in0, in0_b, (count-2)*6, in0_offset + 1, memTaint, Secret);
        validDstAddrs128(mem, rsp, stack_b, stack_offset + 1, memTaint, Secret);

        // AES reqs
        aes_reqs(alg, key_words, round_keys, keys_b, key, mem, memTaint);
        rnd + 1 < length(round_keys);

        inout0 == rounds_opaque(init0, round_keys, rnd);
        inout1 == rounds_opaque(init1, round_keys, rnd);
        inout2 == rounds_opaque(init2, round_keys, rnd);
        inout3 == rounds_opaque(init3, round_keys, rnd);
        inout4 == rounds_opaque(init4, round_keys, rnd);
        inout5 == rounds_opaque(init5, round_keys, rnd);

    ensures
        // Framing
        modifies_buffer_specific128(stack_b, old(mem), mem, stack_offset, stack_offset);

        // Semantics
        inout0 == rounds_opaque(init0, round_keys, rnd + 1);
        inout1 == rounds_opaque(init1, round_keys, rnd + 1);
        inout2 == rounds_opaque(init2, round_keys, rnd + 1);
        inout3 == rounds_opaque(init3, round_keys, rnd + 1);
        inout4 == rounds_opaque(init4, round_keys, rnd + 1);
        inout5 == rounds_opaque(init5, round_keys, rnd + 1);

        buffer128_read(stack_b, stack_offset, mem) == old(reverse_bytes_quad32(buffer128_read(in0_b, (count-2)*6+in0_offset, mem)));
{
    Load128_buffer(rndkey, key, (0x10 * (rnd + 1))-0x80, Secret, keys_b, rnd + 1);

    VAESNI_enc(inout0, inout0, rndkey);
    VAESNI_enc(inout1, inout1, rndkey);

    LoadBe64_buffer128(r13, in0, in0_offset*16+8, Secret, true,  in0_b, (count-2)*6 + in0_offset);

    VAESNI_enc(inout2, inout2, rndkey);

    LoadBe64_buffer128(r12, in0, in0_offset*16,   Secret, false, in0_b, (count-2)*6 + in0_offset);

    VAESNI_enc(inout3, inout3, rndkey);

    Store64_buffer128(rsp, r13, stack_offset*16,   Secret, false, stack_b, stack_offset);  // OpenSSL is further offset by 8 (to account for return addr?)

    VAESNI_enc(inout4, inout4, rndkey);

    Store64_buffer128(rsp, r12, stack_offset*16+8, Secret, true,  stack_b, stack_offset);   // OpenSSL is further offset by 8 (to account for return addr?)

    VAESNI_enc(inout5, inout5, rndkey);

    reveal rounds;
    commute_sub_bytes_shift_rows_forall();
    lemma_reverse_bytes_quad32_64(old(buffer128_read(in0_b, (count-2)*6+in0_offset, mem)), old(buffer128_read(stack_b, stack_offset, mem)), buffer128_read(stack_b, stack_offset, mem));

}


procedure {:quick} Loop6x_round8(
    inline alg:algorithm,  // OpenSSL includes the number of rounds (nr) as a dynamic parameter (stored with the key).  Saves code space but adds extra instructions to the fast path.  Maybe branch predictor is good enough for it not to matter
    ghost count:nat,
    ghost in0_b:buffer128,
    ghost stack_b:buffer128,

    ghost key_words:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128,

    ghost init0:quad32,
    ghost init1:quad32,
    ghost init2:quad32,
    ghost init3:quad32,
    ghost init4:quad32,
    ghost init5:quad32
    )
    lets
//      inp @= rdi; outp @= rsi; len @= rdx; key @= rcx; ivp @= r8; Xip @= r9;
        key @= rcx; 
        T1 @= xmm1; T2 @= xmm2; 
        inout0 @= xmm9; inout1 @= xmm10; inout2 @= xmm11; inout3 @= xmm12;
        inout4 @= xmm13; inout5 @= xmm14; rndkey @= xmm15;
//      counter @= rbx; rounds @= rbp; ret @= r10; constp @= r11; in0 @= r14; end0 @= r15;
        in0 @= r14; 

    reads
        key; in0;
        mem; memTaint;

    modifies
        r12; r13; 
        T1; T2; inout0; inout1; inout2; inout3; inout4; inout5; rndkey;
        efl;

    requires
        count >= 2;

        // Valid ptrs and buffers
        validSrcAddrsOffset128(mem, in0, in0_b, (count-2)*6, 1, memTaint, Secret);

        // AES reqs
        aes_reqs(alg, key_words, round_keys, keys_b, key, mem, memTaint);

        inout0 == rounds_opaque(init0, round_keys, 7);
        inout1 == rounds_opaque(init1, round_keys, 7);
        inout2 == rounds_opaque(init2, round_keys, 7);
        inout3 == rounds_opaque(init3, round_keys, 7);
        inout4 == rounds_opaque(init4, round_keys, 7);
        inout5 == rounds_opaque(init5, round_keys, 7);

    ensures
        // Semantics
        inout0 == rounds_opaque(init0, round_keys, 8);
        inout1 == rounds_opaque(init1, round_keys, 8);
        inout2 == rounds_opaque(init2, round_keys, 8);
        inout3 == rounds_opaque(init3, round_keys, 8);
        inout4 == rounds_opaque(init4, round_keys, 8);
        inout5 == rounds_opaque(init5, round_keys, 8);

        r13 == reverse_bytes_nat64(hi64(buffer128_read(in0_b, (count-2)*6+0, mem))); 
        r12 == reverse_bytes_nat64(lo64(buffer128_read(in0_b, (count-2)*6+0, mem))); 
        rndkey == index(round_keys, 9);
{
    Load128_buffer(T1, key, 0x80-0x80, Secret, keys_b, 8); // # borrow $T1 for $rndkey

    VAESNI_enc(inout0, inout0, T1);
    Load128_buffer(rndkey, key, 0x90-0x80, Secret, keys_b, 9); 
    VAESNI_enc(inout1, inout1, T1);
    VAESNI_enc(inout2, inout2, T1);
    VAESNI_enc(inout3, inout3, T1);

    LoadBe64_buffer128(r13, in0, 0*16+8, Secret, true,  in0_b, (count-2)*6 + 0);
    VAESNI_enc(inout4, inout4, T1);
    LoadBe64_buffer128(r12, in0, 0*16,   Secret, false, in0_b, (count-2)*6 + 0);

    VAESNI_enc(inout5, inout5, T1);

    reveal rounds;
    commute_sub_bytes_shift_rows_forall();
}

procedure {:quick} Loop6x_round9(
    inline alg:algorithm,  // OpenSSL includes the number of rounds (nr) as a dynamic parameter (stored with the key).  Saves code space but adds extra instructions to the fast path.  Maybe branch predictor is good enough for it not to matter
    ghost count:nat,
    ghost in_b:buffer128,
    ghost stack_b:buffer128,

    ghost key_words:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128,

    ghost init0:quad32,
    ghost init1:quad32,
    ghost init2:quad32,
    ghost init3:quad32,
    ghost init4:quad32,
    ghost init5:quad32
    )
    lets
//      outp @= rsi; len @= rdx; key @= rcx; ivp @= r8; Xip @= r9;
        inp @= rdi; key @= rcx; 
        Ii @= xmm0; T1 @= xmm1; T2 @= xmm2; Hkey @= xmm3;
        Z1 @= xmm5; Z2 @= xmm6; Z3 @= xmm7;
        inout0 @= xmm9; inout1 @= xmm10; inout2 @= xmm11; inout3 @= xmm12;
        inout4 @= xmm13; inout5 @= xmm14; rndkey @= xmm15;
//      counter @= rbx; rounds @= rbp; ret @= r10; constp @= r11; in0 @= r14; end0 @= r15;
        //in0 @= r14; 

    reads
        key; inp;
        mem; memTaint;

    modifies
        Ii; T1; T2; Hkey; Z1; Z2; Z3; inout0; inout1; inout2; inout3; inout4; inout5; rndkey;
        efl;

    requires
        // Valid ptrs and buffers
        validSrcAddrsOffset128(mem, inp, in_b, count*6, 6, memTaint, Secret);

        // AES reqs
        aes_reqs(alg, key_words, round_keys, keys_b, key, mem, memTaint);

        inout0 == rounds_opaque(init0, round_keys, 8);
        inout1 == rounds_opaque(init1, round_keys, 8);
        inout2 == rounds_opaque(init2, round_keys, 8);
        inout3 == rounds_opaque(init3, round_keys, 8);
        inout4 == rounds_opaque(init4, round_keys, 8);
        inout5 == rounds_opaque(init5, round_keys, 8);

        rndkey == index(round_keys, 9);

    ensures
        // Semantics
        inout0 == rounds_opaque(init0, round_keys, 9);
        inout1 == rounds_opaque(init1, round_keys, 9);
        inout2 == rounds_opaque(init2, round_keys, 9);
        inout3 == rounds_opaque(init3, round_keys, 9);
        inout4 == rounds_opaque(init4, round_keys, 9);
        inout5 == rounds_opaque(init5, round_keys, 9);

        let rk := index(round_keys, 10);
        T2   == quad32_xor(rk, buffer128_read(in_b, count*6 + 0, mem));
        Ii   == quad32_xor(rk, buffer128_read(in_b, count*6 + 1, mem));
        Z1   == quad32_xor(rk, buffer128_read(in_b, count*6 + 2, mem));
        Z2   == quad32_xor(rk, buffer128_read(in_b, count*6 + 3, mem));
        Z3   == quad32_xor(rk, buffer128_read(in_b, count*6 + 4, mem));
        Hkey == quad32_xor(rk, buffer128_read(in_b, count*6 + 5, mem));
{
    Load128_buffer(T1, key, 0xa0-0x80, Secret, keys_b, 10); 

    // Would do more rounds here for AES-192 or 256

    VAESNI_enc(inout0, inout0, rndkey);
    VAESNI_enc(inout1, inout1, rndkey);
    VPxor(T2, T1, Mem128(inp, 0x00, Secret, in_b, count*6 + 0));
    VAESNI_enc(inout2, inout2, rndkey);
    VPxor(Ii, T1, Mem128(inp, 0x10, Secret, in_b, count*6 + 1));
    VAESNI_enc(inout3, inout3, rndkey);
    VPxor(Z1, T1, Mem128(inp, 0x20, Secret, in_b, count*6 + 2));
    VAESNI_enc(inout4, inout4, rndkey);
    VPxor(Z2, T1, Mem128(inp, 0x30, Secret, in_b, count*6 + 3));
    VAESNI_enc(inout5, inout5, rndkey);
    VPxor(Z3, T1, Mem128(inp, 0x40, Secret, in_b, count*6 + 4));
    VPxor(Hkey, T1, Mem128(inp, 0x50, Secret, in_b, count*6 + 5));

    reveal rounds;
    commute_sub_bytes_shift_rows_forall();
}

procedure {:quick} load_one_msb()
    lets constp @= r11; T2 @= xmm2; 
    modifies constp; T2; efl;
    ensures  T2 == Mkfour(0, 0, 0, 0x1000000);
{
    ZeroXmm(T2);
    assert two_to_nat32(Mktwo(0, 0x1000000)) == 0x100000000000000; // OBSERVE
    PinsrqImm(T2, 0x100000000000000, 1, constp);
    reveal insert_nat64;
}

#reset-options "--z3rlimit 30"
procedure {:quick} Loop6x_final(
    inline alg:algorithm,  
    ghost iv_b:buffer128,
    ghost stack_b:buffer128,

    ghost key_words:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128,

    ghost ctr_orig:quad32,

    ghost init0:quad32,
    ghost init1:quad32,
    ghost init2:quad32,
    ghost init3:quad32,
    ghost init4:quad32,
    ghost init5:quad32,
    ghost ctr0:quad32,
    ghost ctr1:quad32,
    ghost ctr2:quad32,
    ghost ctr3:quad32,
    ghost ctr4:quad32,
    ghost ctr5:quad32,
    ghost plain0:quad32,
    ghost plain1:quad32,
    ghost plain2:quad32,
    ghost plain3:quad32,
    ghost plain4:quad32,
    ghost plain5:quad32,
    ghost inb:quad32
    )
    lets
//      inp @= rdi; outp @= rsi; len @= rdx; key @= rcx; ivp @= r8; Xip @= r9;
        inp @= rdi; outp @= rsi; key @= rcx; ivp @= r8;
        Ii @= xmm0; T1 @= xmm1; T2 @= xmm2; Hkey @= xmm3;
        Z1 @= xmm5; Z2 @= xmm6; Z3 @= xmm7;
        inout0 @= xmm9; inout1 @= xmm10; inout2 @= xmm11; inout3 @= xmm12;
        inout4 @= xmm13; inout5 @= xmm14; rndkey @= xmm15;
        constp @= r11; 
//      counter @= rbx; rounds @= rbp; ret @= r10; constp @= r11; in0 @= r14; end0 @= r15;

    reads
        key; rsp; ivp;
        memTaint;

    modifies
        inp; outp; constp; r12; r13; 
        Ii; T1; T2; Hkey; Z1; Z2; Z3; inout0; inout1; inout2; inout3; inout4; inout5; rndkey;
        mem; efl;

    requires
        // Valid ptrs and buffers
        validSrcAddrs128(mem, ivp, iv_b, 1, memTaint, Secret);
        validDstAddrs128(mem, rsp, stack_b, 8, memTaint, Secret);
        buffers_disjoint128(stack_b, keys_b);
         inp + 0x60 < pow2_64;
        outp + 0x60 < pow2_64;

        // AES reqs
        aes_reqs(alg, key_words, round_keys, keys_b, key, mem, memTaint);

        init0 == quad32_xor(ctr0, index(round_keys, 0));
        init1 == quad32_xor(ctr1, index(round_keys, 0));
        init2 == quad32_xor(ctr2, index(round_keys, 0));
        init3 == quad32_xor(ctr3, index(round_keys, 0));
        init4 == quad32_xor(ctr4, index(round_keys, 0));
        init5 == quad32_xor(ctr5, index(round_keys, 0));

        inout0 == rounds_opaque(init0, round_keys, 9);
        inout1 == rounds_opaque(init1, round_keys, 9);
        inout2 == rounds_opaque(init2, round_keys, 9);
        inout3 == rounds_opaque(init3, round_keys, 9);
        inout4 == rounds_opaque(init4, round_keys, 9);
        inout5 == rounds_opaque(init5, round_keys, 9);

        r13 == reverse_bytes_nat64(hi64(inb)); 
        r12 == reverse_bytes_nat64(lo64(inb)); 


        let rk := index(round_keys, 10);
        T2   == quad32_xor(rk, plain0);
        Ii   == quad32_xor(rk, plain1);
        Z1   == quad32_xor(rk, plain2);
        Z2   == quad32_xor(rk, plain3);
        Z3   == quad32_xor(rk, plain4);
        Hkey == quad32_xor(rk, plain5);

        buffer128_read(iv_b, 0, mem) == reverse_bytes_quad32(ctr_orig);

    ensures
        // Framing
        modifies_buffer_specific128(stack_b, old(mem), mem, 7, 7);

        // Semantics
        buffer128_read(stack_b, 7, mem) == reverse_bytes_quad32(inb);

        inout0 == quad32_xor(plain0, aes_encrypt_le(alg, key_words, ctr0));
        inout1 == quad32_xor(plain1, aes_encrypt_le(alg, key_words, ctr1));
        inout2 == quad32_xor(plain2, aes_encrypt_le(alg, key_words, ctr2));
        inout3 == quad32_xor(plain3, aes_encrypt_le(alg, key_words, ctr3));
        inout4 == quad32_xor(plain4, aes_encrypt_le(alg, key_words, ctr4));
        inout5 == quad32_xor(plain5, aes_encrypt_le(alg, key_words, ctr5));

        rndkey == index(round_keys, 0);

         inp == old( inp) + 0x60;
        outp == old(outp) + 0x60;

        T2 == Mkfour(0, 0, 0, 0x1000000);

        T1   == old(buffer128_read(iv_b, 0, mem));
        let ctr := ctr_orig.lo0 % 256;
        ctr + 6 < 256 ==> Ii   == reverse_bytes_quad32(inc32lite(ctr_orig, 1));
        ctr + 6 < 256 ==> Z1   == reverse_bytes_quad32(inc32lite(ctr_orig, 2));
        ctr + 6 < 256 ==> Z2   == reverse_bytes_quad32(inc32lite(ctr_orig, 3));
        ctr + 6 < 256 ==> Z3   == reverse_bytes_quad32(inc32lite(ctr_orig, 4));
        ctr + 6 < 256 ==> Hkey == reverse_bytes_quad32(inc32lite(ctr_orig, 5));
{
    lemma_quad32_xor_commutes_forall();
    Load128_buffer(T1, ivp, 0, Secret, iv_b, 0); // # load next counter value

    VAESNI_enc_last(inout0, inout0, T2);
    load_one_msb();                              // # borrow $T2, .Lone_msb
    VAESNI_enc_last(inout1, inout1, Ii);
    VPaddd(Ii, T1, T2);
    Store64_buffer128(rsp, r13, 7*16,   Secret, false, stack_b, 7);  // OpenSSL is further offset by 8 (to account for return addr?)
    AddLea64(inp, inp, 0x60);
    VAESNI_enc_last(inout2, inout2, Z1);
    VPaddd(Z1, Ii, T2);
    Store64_buffer128(rsp, r12, 7*16+8, Secret, true,  stack_b, 7);   // OpenSSL is further offset by 8 (to account for return addr?)
    AddLea64(outp, outp, 0x60);
    Load128_buffer(rndkey, key, 0x00-0x80, Secret, keys_b, 0); 

    VAESNI_enc_last(inout3, inout3, Z2);
    VPaddd(Z2, Z1, T2);
    VAESNI_enc_last(inout4, inout4, Z3);
    VPaddd(Z3, Z2, T2);
    VAESNI_enc_last(inout5, inout5, Hkey);
    VPaddd(Hkey, Z3, T2);

    finish_cipher_opt(alg, ctr0, plain0, init0, old(inout0), inout0, round_keys);
    finish_cipher_opt(alg, ctr1, plain1, init1, old(inout1), inout1, round_keys);
    finish_cipher_opt(alg, ctr2, plain2, init2, old(inout2), inout2, round_keys);
    finish_cipher_opt(alg, ctr3, plain3, init3, old(inout3), inout3, round_keys);
    finish_cipher_opt(alg, ctr4, plain4, init4, old(inout4), inout4, round_keys);
    finish_cipher_opt(alg, ctr5, plain5, init5, old(inout5), inout5, round_keys);
    finish_aes_encrypt_le(alg, ctr0, key_words);
    finish_aes_encrypt_le(alg, ctr1, key_words);
    finish_aes_encrypt_le(alg, ctr2, key_words);
    finish_aes_encrypt_le(alg, ctr3, key_words);
    finish_aes_encrypt_le(alg, ctr4, key_words);
    finish_aes_encrypt_le(alg, ctr5, key_words);

    lemma_reverse_bytes_quad32_64(inb, old(buffer128_read(stack_b, 7, mem)), buffer128_read(stack_b, 7, mem));

    lemma_incr_msb(ctr_orig, T1, Ii, 1);
    lemma_incr_msb(ctr_orig, T1, Z1, 2);
    lemma_incr_msb(ctr_orig, T1, Z2, 3);
    lemma_incr_msb(ctr_orig, T1, Z3, 4);
    lemma_incr_msb(ctr_orig, T1, Hkey, 5);
}

#reset-options ""
procedure {:quick} Loop6x_save_output(
    ghost count:nat,
    ghost out_b:buffer128
    )
    lets
        outp @= rsi;  
        Ii @= xmm0; T1 @= xmm1; T2 @= xmm2; Hkey @= xmm3;
        Z1 @= xmm5; Z2 @= xmm6; Z3 @= xmm7;
        inout0 @= xmm9; inout1 @= xmm10; inout2 @= xmm11; inout3 @= xmm12;
        inout4 @= xmm13; inout5 @= xmm14; rndkey @= xmm15;

    reads
        outp;
        Ii; T1; T2; Hkey; Z1; Z2; Z3; rndkey; 
        memTaint;

    modifies
        inout0; inout1; inout2; inout3; inout4; inout5; 
        mem; efl;

    requires
        // Valid ptrs and buffers
        validDstAddrsOffset128(mem, outp - 0x60, out_b, count*6, 6, memTaint, Secret);

    ensures
        modifies_buffer_specific128(out_b, old(mem), mem, count*6+0, count*6+5);
        slice_work_around(buffer128_as_seq(mem, out_b), 6*count) == old(slice_work_around(buffer128_as_seq(mem, out_b), 6*count));   

        buffer128_read(out_b, count*6 + 0, mem) == old(inout0);
        buffer128_read(out_b, count*6 + 1, mem) == old(inout1);
        buffer128_read(out_b, count*6 + 2, mem) == old(inout2);
        buffer128_read(out_b, count*6 + 3, mem) == old(inout3);
        buffer128_read(out_b, count*6 + 4, mem) == old(inout4);
        buffer128_read(out_b, count*6 + 5, mem) == old(inout5);

        inout0 == quad32_xor(T1, rndkey);
        inout1 == Ii;
        inout2 == Z1;
        inout3 == Z2;
        inout4 == Z3;
        inout5 == Hkey;
        
{
    Store128_buffer(outp, inout0, 0-0x60, Secret, out_b, count*6 + 0);
    VPxor(inout0, T1, rndkey);
    Store128_buffer(outp, inout1, 0-0x50, Secret, out_b, count*6 + 1);
    Mov128(inout1, Ii);
    Store128_buffer(outp, inout2, 0-0x40, Secret, out_b, count*6 + 2);
    Mov128(inout2, Z1);
    Store128_buffer(outp, inout3, 0-0x30, Secret, out_b, count*6 + 3);
    Mov128(inout3, Z2);
    Store128_buffer(outp, inout4, 0-0x20, Secret, out_b, count*6 + 4);
    Mov128(inout4, Z3);
    Store128_buffer(outp, inout5, 0-0x10, Secret, out_b, count*6 + 5);
    Mov128(inout5, Hkey);
}

#reset-options "--z3rlimit 20"
procedure {:quick} Loop6x_partial(
    inline alg:algorithm,  
    ghost count:nat,        // Number of 6x128-bit blocks processed so far
    ghost iv_b:buffer128,
    ghost in0_b:buffer128,
    ghost in_b:buffer128,
    ghost stack_b:buffer128,

    ghost key_words:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128,

    //ghost ctr_BE_orig:quad32,
    ghost ctr_BE:quad32
    ) returns (
    ghost init0:quad32,
    ghost init1:quad32,
    ghost init2:quad32,
    ghost init3:quad32,
    ghost init4:quad32,
    ghost init5:quad32
    )
    lets
//      inp @= rdi; outp @= rsi; len @= rdx; key @= rcx; ivp @= r8; Xip @= r9;
        inp @= rdi; key @= rcx; ivp @= r8; 
        Ii @= xmm0; T1 @= xmm1; T2 @= xmm2; Hkey @= xmm3;
        Z1 @= xmm5; Z2 @= xmm6; Z3 @= xmm7;
        inout0 @= xmm9; inout1 @= xmm10; inout2 @= xmm11; inout3 @= xmm12;
        inout4 @= xmm13; inout5 @= xmm14; rndkey @= xmm15;
//      counter @= rbx; rounds @= rbp; ret @= r10; constp @= r11; in0 @= r14; end0 @= r15;
        counter @= rbx; constp @= r11; in0 @= r14; 

    reads
        inp; key; ivp; rsp; in0;
        memTaint;

    modifies
        counter; constp; r12; r13; 
        Ii; T1; T2; Hkey; Z1; Z2; Z3; inout0; inout1; inout2; inout3; inout4; inout5; rndkey;
        mem; efl;

    requires
        count >= 2;
        T2 == Mkfour(0, 0, 0, 0x1000000);

        // Valid ptrs and buffers
        validDstAddrs128(mem, ivp, iv_b, 1, memTaint, Secret);
        validSrcAddrsOffset128(mem, in0, in0_b, (count-2)*6, 6, memTaint, Secret);
        validSrcAddrsOffset128(mem, inp, in_b, count*6, 6, memTaint, Secret);
        validDstAddrs128(mem, rsp, stack_b, 8, memTaint, Secret);
        buffers_disjoint128(iv_b, keys_b);
        buffers_disjoint128(iv_b, stack_b);
        buffers_disjoint128(iv_b, in0_b);
        buffers_disjoint128(iv_b, in_b);
        buffers_disjoint128(stack_b, keys_b);
        buffers_disjoint128(stack_b, in0_b);
        buffers_disjoint128(stack_b, in_b);
         inp + 0x60 < pow2_64;

        // AES reqs
        aes_reqs(alg, key_words, round_keys, keys_b, key, mem, memTaint);
        rndkey == index(round_keys, 0);

        // Counter requirements
        T2 == Mkfour(0, 0, 0, 0x1000000);
        T1 == reverse_bytes_quad32(inc32lite(ctr_BE, 0));
        counter == ctr_BE.lo0 % 256;

        inout0 == quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 0)), rndkey);   

        counter + 6 < 256 ==> inout1 == reverse_bytes_quad32(inc32lite(ctr_BE, 1));
        counter + 6 < 256 ==> inout2 == reverse_bytes_quad32(inc32lite(ctr_BE, 2));
        counter + 6 < 256 ==> inout3 == reverse_bytes_quad32(inc32lite(ctr_BE, 3));
        counter + 6 < 256 ==> inout4 == reverse_bytes_quad32(inc32lite(ctr_BE, 4));
        counter + 6 < 256 ==> inout5 == reverse_bytes_quad32(inc32lite(ctr_BE, 5));

    ensures
        // Framing
        modifies_buffer128_2(stack_b, iv_b, old(mem), mem);
        buffer_modifies_specific128(stack_b, old(mem), mem, 2, 7);
        buffer_modifies_specific128(iv_b,    old(mem), mem, 0, 0);

        // Semantics

        // Counters
        0 <= counter < 256;
        counter == inc32lite(ctr_BE, 6).lo0 % 256;

        // Encryption results
        inout0 == rounds_opaque(init0, round_keys, 9);
        inout1 == rounds_opaque(init1, round_keys, 9);
        inout2 == rounds_opaque(init2, round_keys, 9);
        inout3 == rounds_opaque(init3, round_keys, 9);
        inout4 == rounds_opaque(init4, round_keys, 9);
        inout5 == rounds_opaque(init5, round_keys, 9);

        r13 == reverse_bytes_nat64(hi64(buffer128_read(in0_b, (count-2)*6 + 0, mem))); 
        r12 == reverse_bytes_nat64(lo64(buffer128_read(in0_b, (count-2)*6 + 0, mem))); 


        let rk := index(round_keys, 10);
        T2   == quad32_xor(rk, buffer128_read(in_b, count*6 + 0, mem));
        Ii   == quad32_xor(rk, buffer128_read(in_b, count*6 + 1, mem));
        Z1   == quad32_xor(rk, buffer128_read(in_b, count*6 + 2, mem));
        Z2   == quad32_xor(rk, buffer128_read(in_b, count*6 + 3, mem));
        Z3   == quad32_xor(rk, buffer128_read(in_b, count*6 + 4, mem));
        Hkey == quad32_xor(rk, buffer128_read(in_b, count*6 + 5, mem));

        buffer128_read(iv_b, 0, mem) == reverse_bytes_quad32(inc32lite(ctr_BE, 6));

        // Byte reversals for use by GCM
        buffer128_read(stack_b, 2, mem) == old(reverse_bytes_quad32(buffer128_read(in0_b, (count-2)*6 + 5, mem)));
        buffer128_read(stack_b, 3, mem) == old(reverse_bytes_quad32(buffer128_read(in0_b, (count-2)*6 + 4, mem)));
        buffer128_read(stack_b, 4, mem) == old(reverse_bytes_quad32(buffer128_read(in0_b, (count-2)*6 + 3, mem)));
        buffer128_read(stack_b, 5, mem) == old(reverse_bytes_quad32(buffer128_read(in0_b, (count-2)*6 + 2, mem)));
        buffer128_read(stack_b, 6, mem) == old(reverse_bytes_quad32(buffer128_read(in0_b, (count-2)*6 + 1, mem)));

        init0 == quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 0)), index(round_keys, 0));
        init1 == quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 1)), index(round_keys, 0));
        init2 == quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 2)), index(round_keys, 0));
        init3 == quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 3)), index(round_keys, 0));
        init4 == quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 4)), index(round_keys, 0));
        init5 == quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 5)), index(round_keys, 0));

{
    init0 := inout0;
    init1 := quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 1)), rndkey);
    init2 := quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 2)), rndkey);
    init3 := quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 3)), rndkey);
    init4 := quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 4)), rndkey);
    init5 := quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 5)), rndkey);

    Loop6x_preamble(alg, iv_b, key_words, round_keys, keys_b, ctr_BE);
    Loop6x_step(alg, 1, 5, 2, count, in0_b, stack_b, key_words, round_keys, keys_b, 
                init0, init1, init2, init3, init4, init5);
    Loop6x_plain(alg, 2, key_words, round_keys, keys_b, 
                 init0, init1, init2, init3, init4, init5);
    Loop6x_step(alg, 3, 4, 3, count, in0_b, stack_b, key_words, round_keys, keys_b, 
                init0, init1, init2, init3, init4, init5);
    Loop6x_step(alg, 4, 3, 4, count, in0_b, stack_b, key_words, round_keys, keys_b, 
                init0, init1, init2, init3, init4, init5);
    Loop6x_step(alg, 5, 2, 5, count, in0_b, stack_b, key_words, round_keys, keys_b, 
                init0, init1, init2, init3, init4, init5);
    Loop6x_step(alg, 6, 1, 6, count, in0_b, stack_b, key_words, round_keys, keys_b, 
                init0, init1, init2, init3, init4, init5);
    Loop6x_round8(alg, count, in0_b, stack_b, key_words, round_keys, keys_b, 
                  init0, init1, init2, init3, init4, init5);
    Loop6x_round9(alg, count, in_b, stack_b, key_words, round_keys, keys_b, 
                  init0, init1, init2, init3, init4, init5);
}

#reset-options "--z3rlimit 30"
procedure {:quick} Loop6x(
    inline alg:algorithm,  
    ghost count:nat,        // Number of 6x128-bit blocks processed so far
    ghost iv_b:buffer128,
    ghost in0_b:buffer128,
    ghost in_b:buffer128,
    ghost out_b:buffer128,
    ghost stack_b:buffer128,

    ghost plain_quads:seq(quad32),

    ghost key_words:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128,

    ghost ctr_BE_orig:quad32,
    ghost ctr_BE:quad32
    )
    lets
//      inp @= rdi; outp @= rsi; len @= rdx; key @= rcx; ivp @= r8; Xip @= r9;
        inp @= rdi; outp @= rsi; len @= rdx; key @= rcx; ivp @= r8; 
        Ii @= xmm0; T1 @= xmm1; T2 @= xmm2; Hkey @= xmm3;
        Z1 @= xmm5; Z2 @= xmm6; Z3 @= xmm7;
        inout0 @= xmm9; inout1 @= xmm10; inout2 @= xmm11; inout3 @= xmm12;
        inout4 @= xmm13; inout5 @= xmm14; rndkey @= xmm15;
//      counter @= rbx; rounds @= rbp; ret @= r10; constp @= r11; in0 @= r14; end0 @= r15;
        counter @= rbx; constp @= r11; in0 @= r14; 

    reads
        rax; rbp; r9; r10; r15; xmm4; xmm8;
        key; ivp; rsp;
        memTaint;

    modifies
        inp; outp; len; counter; constp; r12; r13; in0;
        Ii; T1; T2; Hkey; Z1; Z2; Z3; inout0; inout1; inout2; inout3; inout4; inout5; rndkey;
        mem; efl;

    requires
        this.ok;
        count >= 2;
        len >= 6;
        T2 == Mkfour(0, 0, 0, 0x1000000);

        // Valid ptrs and buffers
        validDstAddrs128(mem, ivp, iv_b, 1, memTaint, Secret);
        validSrcAddrsOffset128(mem, in0, in0_b, (count-2)*6, 6, memTaint, Secret);
        validSrcAddrsOffset128(mem, inp, in_b, count*6, 6, memTaint, Secret);
        validDstAddrsOffset128(mem, outp, out_b, count*6, 6, memTaint, Secret);
        validDstAddrs128(mem, rsp, stack_b, 8, memTaint, Secret);
        buffers_disjoint128(iv_b, keys_b);
        buffers_disjoint128(iv_b, stack_b);
        buffers_disjoint128(iv_b, in0_b);
        buffers_disjoint128(iv_b, in_b);
        buffers_disjoint128(iv_b, out_b);
        buffers_disjoint128(stack_b, keys_b);
        buffers_disjoint128(stack_b, in0_b);
        buffers_disjoint128(stack_b, in_b);
        buffers_disjoint128(stack_b, out_b);
        partial_seq_agreement(plain_quads, buffer128_as_seq(mem, in_b), count*6, count*6+6);
         inp + 0x60 < pow2_64;
         in0 + 0x60 < pow2_64;
        outp + 0x60 < pow2_64;

        // AES reqs
        aes_reqs(alg, key_words, round_keys, keys_b, key, mem, memTaint);
        rndkey == index(round_keys, 0);

        // Counter requirements
        count*6 + 6 < pow2_32;
        ctr_BE == inc32lite(ctr_BE_orig, #nat32(count*6));
        T2 == Mkfour(0, 0, 0, 0x1000000);
        T1 == reverse_bytes_quad32(inc32lite(ctr_BE, 0));
        counter == ctr_BE.lo0 % 256;

        inout0 == quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 0)), rndkey);   

        counter + 6 < 256 ==> inout1 == reverse_bytes_quad32(inc32lite(ctr_BE, 1));
        counter + 6 < 256 ==> inout2 == reverse_bytes_quad32(inc32lite(ctr_BE, 2));
        counter + 6 < 256 ==> inout3 == reverse_bytes_quad32(inc32lite(ctr_BE, 3));
        counter + 6 < 256 ==> inout4 == reverse_bytes_quad32(inc32lite(ctr_BE, 4));
        counter + 6 < 256 ==> inout5 == reverse_bytes_quad32(inc32lite(ctr_BE, 5));

        // GCTR progress
        gctr_partial_opaque(alg, 6*count, plain_quads, buffer128_as_seq(mem, out_b), key_words, ctr_BE_orig);
    ensures
        // Framing
        this.ok;
        rax == old(rax);
        rcx == old(rcx);
        rsp == old(rsp);
        rbp == old(rbp);
        r8  == old(r8);
        r9  == old(r9);
        r10 == old(r10);
        r15 == old(r15);
        xmm4 == old(xmm4);
        xmm8 == old(xmm8);
        memTaint == old(memTaint);

        len  > 0 ==> modifies_buffer128_3(stack_b, out_b, iv_b, old(mem), mem);
        len == 0 ==> modifies_buffer128_2(stack_b,        iv_b, old(mem), mem);
        buffer_modifies_specific128(stack_b, old(mem), mem, 2, 7);
        buffer_modifies_specific128(out_b,   old(mem), mem, count*6+0, count*6+5);
        buffer_modifies_specific128(iv_b,    old(mem), mem, 0, 0);

        // Semantics

        // Pointer trackingreverse_bytes_quad32(inc32lite(ctr_BE, 0))
        len == old(len) - 6;
         inp == old( inp) + 0x60;
         in0 == old( in0) + 0x60;
        outp == old(outp) + 0x60;

        rndkey == index(round_keys, 0);

        // Counters
        T2 == Mkfour(0, 0, 0, 0x1000000);

        T1   == reverse_bytes_quad32(inc32lite(ctr_BE, 6));
        counter + 6 < 256 ==> Ii   == reverse_bytes_quad32(inc32lite(ctr_BE, 7));
        counter + 6 < 256 ==> Z1   == reverse_bytes_quad32(inc32lite(ctr_BE, 8));
        counter + 6 < 256 ==> Z2   == reverse_bytes_quad32(inc32lite(ctr_BE, 9));
        counter + 6 < 256 ==> Z3   == reverse_bytes_quad32(inc32lite(ctr_BE,10));
        counter + 6 < 256 ==> Hkey == reverse_bytes_quad32(inc32lite(ctr_BE,11));

        counter == inc32lite(ctr_BE, 6).lo0 % 256;

        // Encryption results
        len == 0 ==> inout0 == quad32_xor(old(buffer128_read(in_b, count*6 + 0, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE, 0)));
        len == 0 ==> inout1 == quad32_xor(old(buffer128_read(in_b, count*6 + 1, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE, 1)));
        len == 0 ==> inout2 == quad32_xor(old(buffer128_read(in_b, count*6 + 2, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE, 2)));
        len == 0 ==> inout3 == quad32_xor(old(buffer128_read(in_b, count*6 + 3, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE, 3)));
        len == 0 ==> inout4 == quad32_xor(old(buffer128_read(in_b, count*6 + 4, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE, 4)));
        len == 0 ==> inout5 == quad32_xor(old(buffer128_read(in_b, count*6 + 5, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE, 5)));

        len > 0 ==> inout0 == quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 6)), rndkey);
        len > 0 ==> inout1 == Ii;
        len > 0 ==> inout2 == Z1;
        len > 0 ==> inout3 == Z2;
        len > 0 ==> inout4 == Z3;
        len > 0 ==> inout5 == Hkey;
        
        len > 0 ==> buffer128_read(out_b, count*6 + 0, mem) == quad32_xor(old(buffer128_read(in_b, count*6 + 0, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE, 0)));
        len > 0 ==> buffer128_read(out_b, count*6 + 1, mem) == quad32_xor(old(buffer128_read(in_b, count*6 + 1, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE, 1)));
        len > 0 ==> buffer128_read(out_b, count*6 + 2, mem) == quad32_xor(old(buffer128_read(in_b, count*6 + 2, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE, 2)));
        len > 0 ==> buffer128_read(out_b, count*6 + 3, mem) == quad32_xor(old(buffer128_read(in_b, count*6 + 3, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE, 3)));
        len > 0 ==> buffer128_read(out_b, count*6 + 4, mem) == quad32_xor(old(buffer128_read(in_b, count*6 + 4, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE, 4)));
        len > 0 ==> buffer128_read(out_b, count*6 + 5, mem) == quad32_xor(old(buffer128_read(in_b, count*6 + 5, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE, 5)));

        // GCTR progress
        len > 0 ==> gctr_partial_opaque(alg, 6*(count+1), plain_quads, buffer128_as_seq(mem, out_b), key_words, ctr_BE_orig);
        
        // Byte reversals for use by GCM
        buffer128_read(stack_b, 2, mem) == old(reverse_bytes_quad32(buffer128_read(in0_b, (count-2)*6 + 5, mem)));
        buffer128_read(stack_b, 3, mem) == old(reverse_bytes_quad32(buffer128_read(in0_b, (count-2)*6 + 4, mem)));
        buffer128_read(stack_b, 4, mem) == old(reverse_bytes_quad32(buffer128_read(in0_b, (count-2)*6 + 3, mem)));
        buffer128_read(stack_b, 5, mem) == old(reverse_bytes_quad32(buffer128_read(in0_b, (count-2)*6 + 2, mem)));
        buffer128_read(stack_b, 6, mem) == old(reverse_bytes_quad32(buffer128_read(in0_b, (count-2)*6 + 1, mem)));
        buffer128_read(stack_b, 7, mem) == old(reverse_bytes_quad32(buffer128_read(in0_b, (count-2)*6 + 0, mem)));
{
    (ghost var init0), (ghost var init1), (ghost var init2), 
    (ghost var init3), (ghost var init4), (ghost var init5) := 
        Loop6x_partial(alg, count, iv_b, in0_b, in_b, stack_b, key_words, round_keys, keys_b, ctr_BE);

    Loop6x_final(alg, iv_b, stack_b, key_words, round_keys, keys_b, 
                 inc32lite(ctr_BE, 6), init0, init1, init2, init3, init4, init5,
                 reverse_bytes_quad32(inc32lite(ctr_BE, 0)), 
                 reverse_bytes_quad32(inc32lite(ctr_BE, 1)), 
                 reverse_bytes_quad32(inc32lite(ctr_BE, 2)), 
                 reverse_bytes_quad32(inc32lite(ctr_BE, 3)), 
                 reverse_bytes_quad32(inc32lite(ctr_BE, 4)), 
                 reverse_bytes_quad32(inc32lite(ctr_BE, 5)), 
                 buffer128_read(in_b, count*6 + 0, mem),
                 buffer128_read(in_b, count*6 + 1, mem),
                 buffer128_read(in_b, count*6 + 2, mem),
                 buffer128_read(in_b, count*6 + 3, mem),
                 buffer128_read(in_b, count*6 + 4, mem),
                 buffer128_read(in_b, count*6 + 5, mem),
                 buffer128_read(in0_b, (count-2)*6 + 0, mem));

    Sub64(len, 6);
    Add64(in0, 0x60);

    if (len > 0) {
        Loop6x_save_output(count, out_b);

        ghost var plain := old(buffer128_as_seq(mem, in_b));
        ghost var cipher := buffer128_as_seq(mem, out_b);
        ghost var bound := count*6;
        gctr_partial_opaque_ignores_postfix(alg, #nat32(bound), plain_quads, plain_quads, old(buffer128_as_seq(mem, out_b)), 
                                            cipher, key_words, ctr_BE_orig);
        gctr_partial_extend6(alg, bound, plain_quads, cipher, key_words, ctr_BE_orig);
    }
}


/*
#reset-options "--z3rlimit 600"
procedure {:quick exportOnly} Loop6x_loop(
    inline alg:algorithm,  
    ghost count:nat,        // Number of 6x128-bit blocks processed so far
    ghost iv_b:buffer128,
    ghost in0_b:buffer128,
    ghost in_b:buffer128,
    ghost out_b:buffer128,
    ghost stack_b:buffer128,
    ghost plain_quads:seq(quad32),

    ghost key_words:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128,

    ghost ctr_BE_orig:quad32,
    ghost ctr_BE:quad32
    )
    lets
//      inp @= rdi; outp @= rsi; len @= rdx; key @= rcx; ivp @= r8; Xip @= r9;
        inp @= rdi; outp @= rsi; len @= rdx; key @= rcx; ivp @= r8; 
        Ii @= xmm0; T1 @= xmm1; T2 @= xmm2; Hkey @= xmm3;
        Z1 @= xmm5; Z2 @= xmm6; Z3 @= xmm7;
        inout0 @= xmm9; inout1 @= xmm10; inout2 @= xmm11; inout3 @= xmm12;
        inout4 @= xmm13; inout5 @= xmm14; rndkey @= xmm15;
//      counter @= rbx; rounds @= rbp; ret @= r10; constp @= r11; in0 @= r14; end0 @= r15;
        counter @= rbx; constp @= r11; in0 @= r14; 

    reads
        rax; rbp; r9; r10; r15; xmm4; xmm8;
        key; ivp; rsp; 
        memTaint;

    modifies
        inp; outp; len; counter; constp; r12; r13; in0;
        Ii; T1; T2; Hkey; Z1; Z2; Z3; inout0; inout1; inout2; inout3; inout4; inout5; rndkey;
        mem; efl;

    requires
        this.ok;
        count >= 2;
        6 <= len && count*6 + len + 6 < pow2_32;
        len % 6 == 0;
        T2 == Mkfour(0, 0, 0, 0x1000000);

        // Valid ptrs and buffers
        validDstAddrs128(mem, ivp, iv_b, 1, memTaint, Secret);

        validSrcAddrsOffset128(mem, in0, in0_b, (count-2)*6, len, memTaint, Secret);
        validSrcAddrsOffset128(mem, inp, in_b, count*6, len, memTaint, Secret);
        validDstAddrsOffset128(mem, outp, out_b, count*6, len, memTaint, Secret);

        validDstAddrs128(mem, rsp, stack_b, 8, memTaint, Secret);
        buffers_disjoint128(iv_b, keys_b);
        buffers_disjoint128(iv_b, stack_b);
        buffers_disjoint128(iv_b, in0_b);
        buffers_disjoint128(iv_b, in_b);
        buffers_disjoint128(iv_b, out_b);
        buffers_disjoint128(stack_b, keys_b);
        buffers_disjoint128(stack_b, in0_b);
        buffers_disjoint128(stack_b, in_b);
        buffers_disjoint128(stack_b, out_b);
        buffers_disjoint128(out_b, keys_b);
        buffers_disjoint128(in_b, out_b) || in_b == out_b;
        partial_seq_agreement(plain_quads, buffer128_as_seq(mem, in_b), count*6, length(buffer128_as_seq(mem, in_b)));
         inp + 0x10*len < pow2_64;
         in0 + 0x10*len < pow2_64;
        outp + 0x10*len < pow2_64;

        // AES reqs
        aes_reqs(alg, key_words, round_keys, keys_b, key, mem, memTaint);
        rndkey == index(round_keys, 0);

        // Counter requirements
        count*6 + 6 < pow2_32;
        ctr_BE == inc32lite(ctr_BE_orig, #nat32(count*6));
        T2 == Mkfour(0, 0, 0, 0x1000000);
        T1 == reverse_bytes_quad32(inc32lite(ctr_BE, 0));
        counter == ctr_BE.lo0 % 256;

        inout0 == quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 0)), rndkey);   

        counter + 6 < 256 ==> inout1 == reverse_bytes_quad32(inc32lite(ctr_BE, 1));
        counter + 6 < 256 ==> inout2 == reverse_bytes_quad32(inc32lite(ctr_BE, 2));
        counter + 6 < 256 ==> inout3 == reverse_bytes_quad32(inc32lite(ctr_BE, 3));
        counter + 6 < 256 ==> inout4 == reverse_bytes_quad32(inc32lite(ctr_BE, 4));
        counter + 6 < 256 ==> inout5 == reverse_bytes_quad32(inc32lite(ctr_BE, 5));

        // GCTR progress
        gctr_partial_opaque(alg, 6*count, plain_quads, buffer128_as_seq(mem, out_b), key_words, ctr_BE_orig);
    ensures
        this.ok;
        // Framing
        modifies_buffer128_3(stack_b, out_b, iv_b, old(mem), mem);
        buffer_modifies_specific128(stack_b, old(mem), mem, 2, 7);
        buffer_modifies_specific128(out_b, old(mem), mem, count*6, #nat(count*6+old(len)-1));
        buffer_modifies_specific128(iv_b,    old(mem), mem, 0, 0);

        rax == old(rax);
        rcx == old(rcx);
        rsp == old(rsp);
        rbp == old(rbp);
        r8  == old(r8);
        r9  == old(r9);
        r10 == old(r10);
        r15 == old(r15);
        xmm4 == old(xmm4);
        xmm8 == old(xmm8);

        memTaint == old(memTaint);

        // Semantics

        // Pointers
         in0 == old( in0) + 0x10*old(len);
         inp == old( inp) + 0x10*old(len);
        outp == old(outp) + 0x10*old(len);

        
        gctr_partial_opaque(alg, #nat(6*count + old(len) - 6), plain_quads, buffer128_as_seq(mem, out_b), key_words, ctr_BE_orig);
        inout0 == quad32_xor(old(buffer128_read(in_b, 6*count+old(len)-6 + 0, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE_orig, #nat32(6*count + old(len) - 6))));
        inout1 == quad32_xor(old(buffer128_read(in_b, 6*count+old(len)-6 + 1, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE_orig, #nat32(6*count + old(len) - 6 + 1))));
        inout2 == quad32_xor(old(buffer128_read(in_b, 6*count+old(len)-6 + 2, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE_orig, #nat32(6*count + old(len) - 6 + 2))));
        inout3 == quad32_xor(old(buffer128_read(in_b, 6*count+old(len)-6 + 3, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE_orig, #nat32(6*count + old(len) - 6 + 3))));
        inout4 == quad32_xor(old(buffer128_read(in_b, 6*count+old(len)-6 + 4, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE_orig, #nat32(6*count + old(len) - 6 + 4))));
        inout5 == quad32_xor(old(buffer128_read(in_b, 6*count+old(len)-6 + 5, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE_orig, #nat32(6*count + old(len) - 6 + 5))));
{
    ghost var iter:nat := 0;
    ghost var ctr := ctr_BE;

    while (len > 0) 
        invariant
            // Manual framing
            this.ok;
            rax == old(rax);
            rcx == old(rcx);
            rsp == old(rsp);
            rbp == old(rbp);
            r8  == old(r8);
            r9  == old(r9);
            r10 == old(r10);
            r15 == old(r15);
            xmm4 == old(xmm4);
            xmm8 == old(xmm8);
            memTaint == old(memTaint);

            len == old(len) - 6*iter;

             in0 == old( in0) + 0x60*iter;
             inp == old( inp) + 0x60*iter;
            outp == old(outp) + 0x60*iter;
            
            T2 == Mkfour(0, 0, 0, 0x1000000);

            // Valid ptrs and buffers
            validDstAddrs128(mem, ivp, iv_b, 1, memTaint, Secret);

            len > 0 ==> validSrcAddrsOffset128(mem,  in0, in0_b, (count-2)*6 + iter*6, old(len) - iter*6, memTaint, Secret);
            len > 0 ==> validSrcAddrsOffset128(mem,  inp,  in_b, count*6 + iter*6, old(len) - iter*6, memTaint, Secret);
            len > 0 ==> validDstAddrsOffset128(mem, outp, out_b, count*6 + iter*6, old(len) - iter*6, memTaint, Secret);

            validDstAddrs128(mem, rsp, stack_b, 8, memTaint, Secret);
            buffers_disjoint128(iv_b, keys_b);
            buffers_disjoint128(iv_b, stack_b);
            buffers_disjoint128(iv_b, in0_b);
            buffers_disjoint128(iv_b, in_b);
            buffers_disjoint128(iv_b, out_b);
            buffers_disjoint128(stack_b, keys_b);
            buffers_disjoint128(stack_b, in0_b);
            buffers_disjoint128(stack_b, in_b);
            buffers_disjoint128(stack_b, out_b);
            buffers_disjoint128(out_b, keys_b);
            buffers_disjoint128(in_b, out_b) || in_b == out_b;
            old(length(buffer128_as_seq(mem, in_b))) >= 6;
            len > 0 ==> partial_seq_agreement(plain_quads, buffer128_as_seq(mem, in_b), 6*count + 6*iter, old(length(buffer128_as_seq(mem, in_b))));
            len > 0 ==>  inp + 0x10*len < pow2_64;
            len > 0 ==>  in0 + 0x10*len < pow2_64;
            len > 0 ==> outp + 0x10*len < pow2_64;
        
            modifies_buffer128_3(stack_b, out_b, iv_b, old(mem), mem);
            buffer_modifies_specific128(stack_b, old(mem), mem, 2, 7);
            buffer_modifies_specific128(out_b,   old(mem), mem, count*6, count*6+iter*6+5);
            len == 0 ==> old(len) >= 6 && buffer_modifies_specific128(out_b, old(mem), mem, count*6, #nat(count*6+old(len)-1));
            buffer_modifies_specific128(iv_b,    old(mem), mem, 0, 0);

            // AES reqs
            aes_reqs(alg, key_words, round_keys, keys_b, key, mem, memTaint);
            rndkey == index(round_keys, 0);

            // Counter requirements
            len % 6 == 0;
            len < pow2_32;
            6 <= old(len) && count*6 + old(len) + 6 < pow2_32;
            count*6 + iter*6 + 6 < pow2_32;
            len > 0 ==> len >= 6;
            ctr == inc32lite(ctr_BE_orig, #nat32(6*count + iter*6));
            T2 == Mkfour(0, 0, 0, 0x1000000);
            T1 == reverse_bytes_quad32(inc32lite(ctr, 0));
            counter == ctr.lo0 % 256;

            len > 0 ==> inout0 == quad32_xor(reverse_bytes_quad32(inc32lite(ctr, 0)), rndkey);   

            len > 0 ==> counter + 6 < 256 ==> inout1 == reverse_bytes_quad32(inc32lite(ctr, 1));
            len > 0 ==> counter + 6 < 256 ==> inout2 == reverse_bytes_quad32(inc32lite(ctr, 2));
            len > 0 ==> counter + 6 < 256 ==> inout3 == reverse_bytes_quad32(inc32lite(ctr, 3));
            len > 0 ==> counter + 6 < 256 ==> inout4 == reverse_bytes_quad32(inc32lite(ctr, 4));
            len > 0 ==> counter + 6 < 256 ==> inout5 == reverse_bytes_quad32(inc32lite(ctr, 5));

            len == 0 ==> inout0 == quad32_xor(old(buffer128_read(in_b, (count+iter-1)*6 + 0, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE_orig, #nat32(6*count + 6*(iter-1)))));
            len == 0 ==> inout1 == quad32_xor(old(buffer128_read(in_b, (count+iter-1)*6 + 1, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE_orig, #nat32(6*count + 6*(iter-1) + 1))));
            len == 0 ==> inout2 == quad32_xor(old(buffer128_read(in_b, (count+iter-1)*6 + 2, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE_orig, #nat32(6*count + 6*(iter-1) + 2))));
            len == 0 ==> inout3 == quad32_xor(old(buffer128_read(in_b, (count+iter-1)*6 + 3, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE_orig, #nat32(6*count + 6*(iter-1) + 3))));
            len == 0 ==> inout4 == quad32_xor(old(buffer128_read(in_b, (count+iter-1)*6 + 4, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE_orig, #nat32(6*count + 6*(iter-1) + 4))));
            len == 0 ==> inout5 == quad32_xor(old(buffer128_read(in_b, (count+iter-1)*6 + 5, mem)), aes_encrypt_BE(alg, key_words, inc32lite(ctr_BE_orig, #nat32(6*count + 6*(iter-1) + 5))));

            // GCTR progress
            len > 0 ==> gctr_partial_opaque(alg, 6*count + 6*iter, plain_quads, buffer128_as_seq(mem, out_b), key_words, ctr_BE_orig);
            len == 0 ==> gctr_partial_opaque(alg, #nat(6*count + 6*(iter-1)), plain_quads, buffer128_as_seq(mem, out_b), key_words, ctr_BE_orig);
        decreases
            len;

    {
        Loop6x(alg, count+iter, iv_b, in0_b, in_b, out_b, stack_b, plain_quads,
               key_words, round_keys, keys_b, ctr_BE_orig, ctr);
        iter := #nat(iter + 1);
        ctr := inc32(ctr, 6);
    }
}


        
#reset-options "--z3rlimit 40"
procedure {:quick} AESNI_ctr32_6x_preamble(
    inline alg:algorithm,  // OpenSSL includes the number of rounds (nr) as a dynamic parameter (stored with the key).  Saves code space but adds extra instructions to the fast path.  Maybe branch predictor is good enough for it not to matter
    ghost key_words:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128,

    ghost ctr_orig:quad32
    )
    lets
//      inp @= rdi; outp @= rsi; len @= rdx; key @= rcx; ivp @= r8; Xip @= r9;
        key @= rcx; 
        T1 @= xmm1; T2 @= xmm2; Z0 @= xmm4;
    
        inout0 @= xmm9; inout1 @= xmm10; inout2 @= xmm11; inout3 @= xmm12;
        inout4 @= xmm13; inout5 @= xmm14; rndkey @= xmm15;
//      counter @= rbx; rounds @= rbp; ret @= r10; constp @= r11; in0 @= r14; end0 @= r15;
        constp @= r11; 

    reads
        key; 
        mem; memTaint;

    modifies
        constp; r12;
        T1; T2; Z0; inout0; inout1; inout2; inout3; inout4; inout5; rndkey;
        efl;

    requires
        // AES reqs
        aes_reqs(alg, key_words, round_keys, keys_b, key, mem, memTaint);
        key - 0x60 >= 0;

        ctr_orig.lo0 % 256 + 6 < 256;
        T1 == reverse_bytes_quad32(inc32lite(ctr_orig, 0));

    ensures
        inout0 == rounds_opaque(quad32_xor(reverse_bytes_quad32(inc32lite(ctr_orig, 0)), index(round_keys, 0)), round_keys, 0);
        inout1 == rounds_opaque(quad32_xor(reverse_bytes_quad32(inc32lite(ctr_orig, 1)), index(round_keys, 0)), round_keys, 0);
        inout2 == rounds_opaque(quad32_xor(reverse_bytes_quad32(inc32lite(ctr_orig, 2)), index(round_keys, 0)), round_keys, 0);
        inout3 == rounds_opaque(quad32_xor(reverse_bytes_quad32(inc32lite(ctr_orig, 3)), index(round_keys, 0)), round_keys, 0);
        inout4 == rounds_opaque(quad32_xor(reverse_bytes_quad32(inc32lite(ctr_orig, 4)), index(round_keys, 0)), round_keys, 0);
        inout5 == rounds_opaque(quad32_xor(reverse_bytes_quad32(inc32lite(ctr_orig, 5)), index(round_keys, 0)), round_keys, 0);

        T1 == reverse_bytes_quad32(inc32lite(ctr_orig, 6));

        rndkey == index(round_keys, 1);
{
    Load128_buffer(Z0,     key, 0x00-0x80, Secret, keys_b, 0);  // # borrow $Z0 for $rndkey
    load_one_msb();                                             // # borrow $T2, .Lone_msb
    Load128_buffer(rndkey, key, 0x10-0x80, Secret, keys_b, 1);  
    
    //OpenSSL uses AddLea64(r12, key, 0x20-0x80) instead of the next two instructions
    Mov64(r12, key);
    Sub64(r12, 0x60);

    VPxor(inout0, T1, Z0);
    VPaddd(inout1, T1, T2);
    lemma_incr_msb(inc32lite(ctr_orig, 0), old(T1), inout1, 1);
    VPaddd(inout2, inout1, T2);
    lemma_incr_msb(inc32lite(ctr_orig, 0), old(T1), inout2, 2);
    VPxor(inout1, inout1, Z0);
    VPaddd(inout3, inout2, T2);
    lemma_incr_msb(inc32lite(ctr_orig, 0), old(T1), inout3, 3);
    VPxor(inout2, inout2, Z0);
    VPaddd(inout4, inout3, T2);
    lemma_incr_msb(inc32lite(ctr_orig, 0), old(T1), inout4, 4);
    VPxor(inout3, inout3, Z0);
    VPaddd(inout5, inout4, T2);
    lemma_incr_msb(inc32lite(ctr_orig, 0), old(T1), inout5, 5);
    VPxor(inout4, inout4, Z0);
    VPaddd(T1, inout5, T2);
    lemma_incr_msb(inc32lite(ctr_orig, 0), old(T1), T1, 6);
    VPxor(inout5, inout5, Z0);

    init_rounds_opaque(inout0, round_keys);
    init_rounds_opaque(inout1, round_keys);
    init_rounds_opaque(inout2, round_keys);
    init_rounds_opaque(inout3, round_keys);
    init_rounds_opaque(inout4, round_keys);
    init_rounds_opaque(inout5, round_keys);
}

#reset-options ""
procedure {:quick} AESNI_ctr32_6x_loop_body(
    inline alg:algorithm,
    inline rnd:nat,
    ghost key_words:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128,

    ghost init0:quad32,
    ghost init1:quad32,
    ghost init2:quad32,
    ghost init3:quad32,
    ghost init4:quad32,
    ghost init5:quad32
    )
    lets
        key @= rcx; 
        inout0 @= xmm9; inout1 @= xmm10; inout2 @= xmm11; inout3 @= xmm12;
        inout4 @= xmm13; inout5 @= xmm14; rndkey @= xmm15;

    reads
        key; 
        mem; memTaint;

    modifies
        inout0; inout1; inout2; inout3; inout4; inout5; rndkey;
        efl;

    requires
        // AES reqs
        aes_reqs(alg, key_words, round_keys, keys_b, key, mem, memTaint);
        rnd + 2 < length(round_keys);
        rndkey == index(round_keys, rnd+1);

        inout0 == rounds_opaque(init0, round_keys, rnd);
        inout1 == rounds_opaque(init1, round_keys, rnd);
        inout2 == rounds_opaque(init2, round_keys, rnd);
        inout3 == rounds_opaque(init3, round_keys, rnd);
        inout4 == rounds_opaque(init4, round_keys, rnd);
        inout5 == rounds_opaque(init5, round_keys, rnd);

    ensures
        inout0 == rounds_opaque(init0, round_keys, rnd + 1);
        inout1 == rounds_opaque(init1, round_keys, rnd + 1);
        inout2 == rounds_opaque(init2, round_keys, rnd + 1);
        inout3 == rounds_opaque(init3, round_keys, rnd + 1);
        inout4 == rounds_opaque(init4, round_keys, rnd + 1);
        inout5 == rounds_opaque(init5, round_keys, rnd + 1);
        
        rndkey == index(round_keys, rnd+2);
{
    VAESNI_enc(inout0, inout0, rndkey);
    VAESNI_enc(inout1, inout1, rndkey);
    VAESNI_enc(inout2, inout2, rndkey);
    VAESNI_enc(inout3, inout3, rndkey);
    VAESNI_enc(inout4, inout4, rndkey);
    VAESNI_enc(inout5, inout5, rndkey);

    reveal rounds;
    commute_sub_bytes_shift_rows_forall();
    Load128_buffer(rndkey, key, 16*(rnd+2)-0x80, Secret, keys_b, rnd+2);
}

procedure {:recursive} {:quick exportOnly} AESNI_ctr32_6x_loop_recursive(
    inline alg:algorithm,
    inline rnd:nat,
    ghost key_words:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128,

    ghost init0:quad32,
    ghost init1:quad32,
    ghost init2:quad32,
    ghost init3:quad32,
    ghost init4:quad32,
    ghost init5:quad32
    )
    lets
        key @= rcx; 
        inout0 @= xmm9; inout1 @= xmm10; inout2 @= xmm11; inout3 @= xmm12;
        inout4 @= xmm13; inout5 @= xmm14; rndkey @= xmm15;

    reads
        key; 
        mem; memTaint;

    modifies
        inout0; inout1; inout2; inout3; inout4; inout5; rndkey;
        efl;

    requires
        // AES reqs
        aes_reqs(alg, key_words, round_keys, keys_b, key, mem, memTaint);
        rnd + 2 < length(round_keys);
        rndkey == index(round_keys, 1);

        inout0 == rounds_opaque(init0, round_keys, 0);
        inout1 == rounds_opaque(init1, round_keys, 0);
        inout2 == rounds_opaque(init2, round_keys, 0);
        inout3 == rounds_opaque(init3, round_keys, 0);
        inout4 == rounds_opaque(init4, round_keys, 0);
        inout5 == rounds_opaque(init5, round_keys, 0);

    ensures
        inout0 == rounds_opaque(init0, round_keys, rnd + 1);
        inout1 == rounds_opaque(init1, round_keys, rnd + 1);
        inout2 == rounds_opaque(init2, round_keys, rnd + 1);
        inout3 == rounds_opaque(init3, round_keys, rnd + 1);
        inout4 == rounds_opaque(init4, round_keys, rnd + 1);
        inout5 == rounds_opaque(init5, round_keys, rnd + 1);
        
        rndkey == index(round_keys, rnd+2);
{
    inline if (rnd > 0) {
        AESNI_ctr32_6x_loop_recursive(alg, #nat(rnd-1), key_words, round_keys, keys_b, 
                                      init0, init1, init2, init3, init4, init5);
    }
    AESNI_ctr32_6x_loop_body(alg, rnd, key_words, round_keys, keys_b, 
                             init0, init1, init2, init3, init4, init5);
}

procedure {:quick} AESNI_ctr32_6x_round9(
    inline alg:algorithm,
    ghost count:nat,
    ghost in_b:buffer128,

    ghost key_words:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128,

    ghost init0:quad32,
    ghost init1:quad32,
    ghost init2:quad32,
    ghost init3:quad32,
    ghost init4:quad32,
    ghost init5:quad32
    )
    lets
        inp @= rdi; key @= rcx; 
        T2 @= xmm2; Hkey @= xmm3;
        Z0 @= xmm4; Z1 @= xmm5; Z2 @= xmm6; Xi @= xmm8;
        inout0 @= xmm9; inout1 @= xmm10; inout2 @= xmm11; inout3 @= xmm12;
        inout4 @= xmm13; inout5 @= xmm14; rndkey @= xmm15;

    reads
        key; 
        mem; memTaint;

    modifies
        inp;
        T2; Hkey; Z0; Z1; Z2; Xi;
        inout0; inout1; inout2; inout3; inout4; inout5; rndkey;
        efl;

    requires
        validSrcAddrsOffset128(mem, inp, in_b, count*6, 6, memTaint, Secret);
        inp + 0x60 < pow2_64;

        // AES reqs
        aes_reqs(alg, key_words, round_keys, keys_b, key, mem, memTaint);
        rndkey == index(round_keys, #nat(nr(alg)-1));

        inout0 == rounds_opaque(init0, round_keys, #nat(nr(alg)-2));
        inout1 == rounds_opaque(init1, round_keys, #nat(nr(alg)-2));
        inout2 == rounds_opaque(init2, round_keys, #nat(nr(alg)-2));
        inout3 == rounds_opaque(init3, round_keys, #nat(nr(alg)-2));
        inout4 == rounds_opaque(init4, round_keys, #nat(nr(alg)-2));
        inout5 == rounds_opaque(init5, round_keys, #nat(nr(alg)-2));

    ensures
        inout0 == rounds_opaque(init0, round_keys, #nat(nr(alg)-1));
        inout1 == rounds_opaque(init1, round_keys, #nat(nr(alg)-1));
        inout2 == rounds_opaque(init2, round_keys, #nat(nr(alg)-1));
        inout3 == rounds_opaque(init3, round_keys, #nat(nr(alg)-1));
        inout4 == rounds_opaque(init4, round_keys, #nat(nr(alg)-1));
        inout5 == rounds_opaque(init5, round_keys, #nat(nr(alg)-1));
        
        let rk := index(round_keys, #nat(nr(alg)));
        Z0   == quad32_xor(rk, buffer128_read(in_b, count*6 + 0, mem));
        Z1   == quad32_xor(rk, buffer128_read(in_b, count*6 + 1, mem));
        Z2   == quad32_xor(rk, buffer128_read(in_b, count*6 + 2, mem));
        Xi   == quad32_xor(rk, buffer128_read(in_b, count*6 + 3, mem));
        T2   == quad32_xor(rk, buffer128_read(in_b, count*6 + 4, mem));
        Hkey == quad32_xor(rk, buffer128_read(in_b, count*6 + 5, mem));
        
        inp == old(inp) + 0x60; 
{
    Load128_buffer(Hkey, key, 0xa0-0x80, Secret, keys_b, 10);  // # last round key
    
    VAESNI_enc(inout0, inout0, rndkey);
    VPxor(Z0, Hkey, Mem128(inp, 0x00, Secret, in_b, count*6 + 0));
    VAESNI_enc(inout1, inout1, rndkey);
    VPxor(Z1, Hkey, Mem128(inp, 0x10, Secret, in_b, count*6 + 1));
    VAESNI_enc(inout2, inout2, rndkey);
    VPxor(Z2, Hkey, Mem128(inp, 0x20, Secret, in_b, count*6 + 2));
    VAESNI_enc(inout3, inout3, rndkey);
    VPxor(Xi, Hkey, Mem128(inp, 0x30, Secret, in_b, count*6 + 3));
    VAESNI_enc(inout4, inout4, rndkey);
    VPxor(T2, Hkey, Mem128(inp, 0x40, Secret, in_b, count*6 + 4));
    VAESNI_enc(inout5, inout5, rndkey);
    VPxor(Hkey, Hkey, Mem128(inp, 0x50, Secret, in_b, count*6 + 5));

    reveal rounds;
    commute_sub_bytes_shift_rows_forall();

    AddLea64(inp, inp, 0x60);
}

procedure {:quick} AESNI_ctr32_6x_final(
    inline alg:algorithm,
    ghost count:nat,
    ghost out_b:buffer128,

    ghost key_words:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128,

    ghost init0:quad32,
    ghost init1:quad32,
    ghost init2:quad32,
    ghost init3:quad32,
    ghost init4:quad32,
    ghost init5:quad32,
    ghost ctr0:quad32,
    ghost ctr1:quad32,
    ghost ctr2:quad32,
    ghost ctr3:quad32,
    ghost ctr4:quad32,
    ghost ctr5:quad32,
    ghost plain0:quad32,
    ghost plain1:quad32,
    ghost plain2:quad32,
    ghost plain3:quad32,
    ghost plain4:quad32,
    ghost plain5:quad32
    )
    lets
        outp @= rsi; key @= rcx; 
        T2 @= xmm2; Hkey @= xmm3;
        Z0 @= xmm4; Z1 @= xmm5; Z2 @= xmm6; Xi @= xmm8;
        inout0 @= xmm9; inout1 @= xmm10; inout2 @= xmm11; inout3 @= xmm12;
        inout4 @= xmm13; inout5 @= xmm14; rndkey @= xmm15;

    reads
        key; 
        memTaint;

    modifies
        outp;
        T2; Hkey; Z0; Z1; Z2; Xi;
        inout0; inout1; inout2; inout3; inout4; inout5; rndkey;
        mem; efl;

    requires
        validDstAddrsOffset128(mem, outp, out_b, count*6, 6, memTaint, Secret);
        outp + 0x60 < pow2_64;

        // AES reqs
        aes_reqs(alg, key_words, round_keys, keys_b, key, mem, memTaint);

        init0 == quad32_xor(ctr0, index(round_keys, 0));
        init1 == quad32_xor(ctr1, index(round_keys, 0));
        init2 == quad32_xor(ctr2, index(round_keys, 0));
        init3 == quad32_xor(ctr3, index(round_keys, 0));
        init4 == quad32_xor(ctr4, index(round_keys, 0));
        init5 == quad32_xor(ctr5, index(round_keys, 0));

        inout0 == rounds_opaque(init0, round_keys, #nat(nr(alg)-1));
        inout1 == rounds_opaque(init1, round_keys, #nat(nr(alg)-1));
        inout2 == rounds_opaque(init2, round_keys, #nat(nr(alg)-1));
        inout3 == rounds_opaque(init3, round_keys, #nat(nr(alg)-1));
        inout4 == rounds_opaque(init4, round_keys, #nat(nr(alg)-1));
        inout5 == rounds_opaque(init5, round_keys, #nat(nr(alg)-1));

        let rk := index(round_keys, #nat(nr(alg)));
        Z0   == quad32_xor(rk, plain0);
        Z1   == quad32_xor(rk, plain1);
        Z2   == quad32_xor(rk, plain2);
        Xi   == quad32_xor(rk, plain3);
        T2   == quad32_xor(rk, plain4);
        Hkey == quad32_xor(rk, plain5);
        
    ensures
        modifies_buffer_specific128(out_b, old(mem), mem, count*6+0, count*6+5);
        slice_work_around(buffer128_as_seq(mem, out_b), 6*count) == old(slice_work_around(buffer128_as_seq(mem, out_b), 6*count));   
        outp == old(outp) + 0x60; 

        buffer128_read(out_b, count*6 + 0, mem) == inout0;
        buffer128_read(out_b, count*6 + 1, mem) == inout1;
        buffer128_read(out_b, count*6 + 2, mem) == inout2;
        buffer128_read(out_b, count*6 + 3, mem) == inout3;
        buffer128_read(out_b, count*6 + 4, mem) == inout4;
        buffer128_read(out_b, count*6 + 5, mem) == inout5;

        inout0 == quad32_xor(plain0, aes_encrypt_le(alg, key_words, ctr0));
        inout1 == quad32_xor(plain1, aes_encrypt_le(alg, key_words, ctr1));
        inout2 == quad32_xor(plain2, aes_encrypt_le(alg, key_words, ctr2));
        inout3 == quad32_xor(plain3, aes_encrypt_le(alg, key_words, ctr3));
        inout4 == quad32_xor(plain4, aes_encrypt_le(alg, key_words, ctr4));
        inout5 == quad32_xor(plain5, aes_encrypt_le(alg, key_words, ctr5));
       
{
    VAESNI_enc_last(inout0, inout0, Z0);
    VAESNI_enc_last(inout1, inout1, Z1);
    VAESNI_enc_last(inout2, inout2, Z2);
    VAESNI_enc_last(inout3, inout3, Xi);
    VAESNI_enc_last(inout4, inout4, T2);
    VAESNI_enc_last(inout5, inout5, Hkey);

    Store128_buffer(outp, inout0, 0x00, Secret, out_b, count*6 + 0);
    Store128_buffer(outp, inout1, 0x10, Secret, out_b, count*6 + 1);
    Store128_buffer(outp, inout2, 0x20, Secret, out_b, count*6 + 2);
    Store128_buffer(outp, inout3, 0x30, Secret, out_b, count*6 + 3);
    Store128_buffer(outp, inout4, 0x40, Secret, out_b, count*6 + 4);
    Store128_buffer(outp, inout5, 0x50, Secret, out_b, count*6 + 5);

    AddLea64(outp, outp, 0x60);
    
    lemma_quad32_xor_commutes_forall();
    finish_cipher_opt(alg, ctr0, plain0, init0, old(inout0), inout0, round_keys);
    finish_cipher_opt(alg, ctr1, plain1, init1, old(inout1), inout1, round_keys);
    finish_cipher_opt(alg, ctr2, plain2, init2, old(inout2), inout2, round_keys);
    finish_cipher_opt(alg, ctr3, plain3, init3, old(inout3), inout3, round_keys);
    finish_cipher_opt(alg, ctr4, plain4, init4, old(inout4), inout4, round_keys);
    finish_cipher_opt(alg, ctr5, plain5, init5, old(inout5), inout5, round_keys);
    finish_aes_encrypt_le(alg, ctr0, key_words);
    finish_aes_encrypt_le(alg, ctr1, key_words);
    finish_aes_encrypt_le(alg, ctr2, key_words);
    finish_aes_encrypt_le(alg, ctr3, key_words);
    finish_aes_encrypt_le(alg, ctr4, key_words);
    finish_aes_encrypt_le(alg, ctr5, key_words);
}

#reset-options "--z3rlimit 20"
procedure {:quick} AESNI_ctr32_6x(
    inline alg:algorithm,  
    ghost count:nat,
    ghost in_b:buffer128,
    ghost out_b:buffer128,
    
    ghost plain_quads:seq(quad32),

    ghost key_words:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128,

    ghost ctr_BE:quad32,
    ghost ctr_BE_orig:quad32
    )
    lets
//      inp @= rdi; outp @= rsi; len @= rdx; key @= rcx; ivp @= r8; Xip @= r9;
        inp @= rdi; outp @= rsi; key @= rcx; 
        T1 @= xmm1; T2 @= xmm2; Hkey @= xmm3;
        Z0 @= xmm4; Z1 @= xmm5; Z2 @= xmm6; Xi @= xmm8;
    
        inout0 @= xmm9; inout1 @= xmm10; inout2 @= xmm11; inout3 @= xmm12;
        inout4 @= xmm13; inout5 @= xmm14; rndkey @= xmm15;
//      counter @= rbx; rounds @= rbp; ret @= r10; constp @= r11; in0 @= r14; end0 @= r15;
        constp @= r11; 

    reads
        key; 
        memTaint;

    modifies
        inp; outp; constp; r12;
        T1; T2; Hkey; Z0; Z1; Z2; Xi;
        inout0; inout1; inout2; inout3; inout4; inout5; rndkey;
        mem; efl;

    requires
        // Valid buffers and pointers
        validSrcAddrsOffset128(mem, inp, in_b, count*6, 6, memTaint, Secret);
        validDstAddrsOffset128(mem, outp, out_b, count*6, 6, memTaint, Secret);
        partial_seq_agreement(plain_quads, buffer128_as_seq(mem, in_b), count*6, count*6+6);
        inp  + 0x60 < pow2_64;
        outp + 0x60 < pow2_64;

        // AES reqs
        aes_reqs(alg, key_words, round_keys, keys_b, key, mem, memTaint);
        key - 0x60 >= 0;

        // Counter requirements
        count*6 + 6 < pow2_32;
        ctr_BE == inc32lite(ctr_BE_orig, #nat32(count*6));
        ctr_BE.lo0 % 256 + 6 < 256;
        T1 == reverse_bytes_quad32(inc32lite(ctr_BE, 0));

        // GCTR progress
        gctr_partial_opaque(alg, 6*count, plain_quads, buffer128_as_seq(mem, out_b), key_words, ctr_BE_orig);
    ensures
        modifies_buffer_specific128(out_b, old(mem), mem, count*6+0, count*6+5);
        slice_work_around(buffer128_as_seq(mem, out_b), 6*count) == old(slice_work_around(buffer128_as_seq(mem, out_b), 6*count));   
         inp == old( inp) + 0x60; 
        outp == old(outp) + 0x60; 

        T1 == reverse_bytes_quad32(inc32lite(ctr_BE, 6));
        
        buffer128_read(out_b, count*6 + 0, mem) == inout0;
        buffer128_read(out_b, count*6 + 1, mem) == inout1;
        buffer128_read(out_b, count*6 + 2, mem) == inout2;
        buffer128_read(out_b, count*6 + 3, mem) == inout3;
        buffer128_read(out_b, count*6 + 4, mem) == inout4;
        buffer128_read(out_b, count*6 + 5, mem) == inout5;
        
        // GCTR progress
        gctr_partial_opaque(alg, 6*(count+1), plain_quads, buffer128_as_seq(mem, out_b), key_words, ctr_BE_orig);
{
    assert {:quick_type} length(round_keys) == nr(alg)+1;
    ghost var init0 := quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 0)), index(round_keys, 0));
    ghost var init1 := quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 1)), index(round_keys, 0));
    ghost var init2 := quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 2)), index(round_keys, 0));
    ghost var init3 := quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 3)), index(round_keys, 0));
    ghost var init4 := quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 4)), index(round_keys, 0));
    ghost var init5 := quad32_xor(reverse_bytes_quad32(inc32lite(ctr_BE, 5)), index(round_keys, 0));

    AESNI_ctr32_6x_preamble(alg, key_words, round_keys, keys_b, ctr_BE);
    AESNI_ctr32_6x_loop_recursive(alg, 7, key_words, round_keys, keys_b, init0, init1, init2, init3, init4, init5); 
    AESNI_ctr32_6x_round9(alg, count, in_b, key_words, round_keys, keys_b, init0, init1, init2, init3, init4, init5);
    AESNI_ctr32_6x_final(alg, count, out_b, key_words, round_keys, keys_b, init0, init1, init2, init3, init4, init5,
                        reverse_bytes_quad32(inc32lite(ctr_BE, 0)),
                        reverse_bytes_quad32(inc32lite(ctr_BE, 1)),
                        reverse_bytes_quad32(inc32lite(ctr_BE, 2)),
                        reverse_bytes_quad32(inc32lite(ctr_BE, 3)),
                        reverse_bytes_quad32(inc32lite(ctr_BE, 4)),
                        reverse_bytes_quad32(inc32lite(ctr_BE, 5)),
                        buffer128_read(in_b, count*6 + 0, mem),
                        buffer128_read(in_b, count*6 + 1, mem),
                        buffer128_read(in_b, count*6 + 2, mem),
                        buffer128_read(in_b, count*6 + 3, mem),
                        buffer128_read(in_b, count*6 + 4, mem),
                        buffer128_read(in_b, count*6 + 5, mem));

    ghost var plain := old(buffer128_as_seq(mem, in_b));
    ghost var cipher := buffer128_as_seq(mem, out_b);
    ghost var bound := count*6;
    gctr_partial_opaque_ignores_postfix(alg, #nat32(bound), plain_quads, plain_quads, old(buffer128_as_seq(mem, out_b)), 
                                        cipher, key_words, ctr_BE_orig);
    gctr_partial_extend6(alg, bound, plain_quads, cipher, key_words, ctr_BE_orig);

}

#reset-options "--z3rlimit 20"
procedure {:quick} Ctr32_ghash_6_prelude(
    inline alg:algorithm,  
    ghost stack_b:buffer128,

    ghost key_words:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128,
    ghost ctr_orig:quad32
    )
    lets
//      inp @= rdi; outp @= rsi; len @= rdx; key @= rcx; ivp @= r8; Xip @= r9;
        key @= rcx; 
        T1 @= xmm1; T2 @= xmm2;
        Z0 @= xmm4; 
    
        inout0 @= xmm9; inout1 @= xmm10; inout2 @= xmm11; inout3 @= xmm12;
        inout4 @= xmm13; inout5 @= xmm14; rndkey @= xmm15;
//      counter @= rbx; rounds @= rbp; ret @= r10; constp @= r11; in0 @= r14; end0 @= r15;
        constp @= r11;

    reads
        key; rsp;
        T1;
        memTaint;

    modifies
        T2; Z0; 
        inout0; inout1; inout2; inout3; inout4; inout5; rndkey;
        constp; mem; efl;

    requires
        // Valid buffers and pointers
        validDstAddrs128(mem, rsp, stack_b, 8, memTaint, Secret);

        // AES reqs
        aes_reqs(alg, key_words, round_keys, keys_b, key, mem, memTaint);

        // Counters
        ctr_orig.lo0 % 256 + 6 < 256;
        T1 == reverse_bytes_quad32(inc32lite(ctr_orig, 0));
    ensures
        modifies_buffer_specific128(stack_b, old(mem), mem, 1, 1);

        T2 == Mkfour(0, 0, 0, 0x1000000);
        rndkey == index(round_keys, 0);

        inout0 == quad32_xor(reverse_bytes_quad32(inc32lite(ctr_orig, 0)), rndkey);   
        inout1 == reverse_bytes_quad32(inc32lite(ctr_orig, 1));
        inout2 == reverse_bytes_quad32(inc32lite(ctr_orig, 2));
        inout3 == reverse_bytes_quad32(inc32lite(ctr_orig, 3));
        inout4 == reverse_bytes_quad32(inc32lite(ctr_orig, 4));
        inout5 == reverse_bytes_quad32(inc32lite(ctr_orig, 5));

        buffer128_read(stack_b, 1, mem) == Mkfour(0, 0, 0, 0);
{
    load_one_msb();   // # borrow $T2, .Lone_msb
    VPxor(Z0, Z0, Z0);  // # $Z0   = 0
    lemma_quad32_xor();
    Load128_buffer(rndkey, key, 0x00-0x80, Secret, keys_b, 0);
    VPaddd(inout1, T1, T2);      lemma_incr_msb(inc32lite(ctr_orig, 0), old(T1), inout1, 1);
    VPaddd(inout2, inout1, T2);  lemma_incr_msb(inc32lite(ctr_orig, 0), old(T1), inout2, 2);
    VPaddd(inout3, inout2, T2);  lemma_incr_msb(inc32lite(ctr_orig, 0), old(T1), inout3, 3);
    VPaddd(inout4, inout3, T2);  lemma_incr_msb(inc32lite(ctr_orig, 0), old(T1), inout4, 4);
    VPaddd(inout5, inout4, T2);  lemma_incr_msb(inc32lite(ctr_orig, 0), old(T1), inout5, 5);
    VPxor(inout0, T1, rndkey);
    Store128_buffer(rsp, Z0, 0x10, Secret, stack_b, 1);     // # "$Z3" = 0
}

#reset-options ""
procedure {:quick} Encrypt_save_and_shuffle_output(
    ghost count:nat,
    ghost out_b:buffer128
    )
    lets
        outp @= rsi;  
        Ii @= xmm0; T1 @= xmm1; 
        Z3 @= xmm7;
        inout0 @= xmm9; inout1 @= xmm10; inout2 @= xmm11; inout3 @= xmm12;
        inout4 @= xmm13; inout5 @= xmm14;

    reads
        outp;
        Ii; Z3;
        memTaint;

    modifies
        T1; inout0; inout1; inout2; inout3; inout4; inout5; 
        mem; efl;

    requires
        // Valid ptrs and buffers
        validDstAddrsOffset128(mem, outp - 0x60, out_b, count*6, 6, memTaint, Secret);

        Ii == Mkfour(0x0C0D0E0F, 0x08090A0B, 0x04050607, 0x00010203);

    ensures
        modifies_buffer_specific128(out_b, old(mem), mem, count*6+0, count*6+5);
        slice_work_around(buffer128_as_seq(mem, out_b), 6*count) == old(slice_work_around(buffer128_as_seq(mem, out_b), 6*count));   

        buffer128_read(out_b, count*6 + 0, mem) == old(inout0);
        buffer128_read(out_b, count*6 + 1, mem) == old(inout1);
        buffer128_read(out_b, count*6 + 2, mem) == old(inout2);
        buffer128_read(out_b, count*6 + 3, mem) == old(inout3);
        buffer128_read(out_b, count*6 + 4, mem) == old(inout4);
        buffer128_read(out_b, count*6 + 5, mem) == old(inout5);

        T1 == quad32_xor(old(T1), Z3);
        inout0 == reverse_bytes_quad32(old(inout0));
        inout1 == reverse_bytes_quad32(old(inout1));
        inout2 == reverse_bytes_quad32(old(inout2));
        inout3 == reverse_bytes_quad32(old(inout3));
        inout4 == reverse_bytes_quad32(old(inout4));
        inout5 == reverse_bytes_quad32(old(inout5));
        
{
    Store128_buffer(outp, inout0, 0-0x60, Secret, out_b, count*6 + 0);
    VPshufb(inout0, inout0, Ii);
    VPxor(T1, T1, Z3);
    Store128_buffer(outp, inout1, 0-0x50, Secret, out_b, count*6 + 1);
    VPshufb(inout1, inout1, Ii);
    Store128_buffer(outp, inout2, 0-0x40, Secret, out_b, count*6 + 2);
    VPshufb(inout2, inout2, Ii);
    Store128_buffer(outp, inout3, 0-0x30, Secret, out_b, count*6 + 3);
    VPshufb(inout3, inout3, Ii);
    Store128_buffer(outp, inout4, 0-0x20, Secret, out_b, count*6 + 4);
    VPshufb(inout4, inout4, Ii);
    Store128_buffer(outp, inout5, 0-0x10, Secret, out_b, count*6 + 5);
    VPshufb(inout5, inout5, Ii);
}

#reset-options "--z3rlimit 30"
procedure {:quick} AES_GCM_encrypt(
    inline alg:algorithm,  
    ghost iv_b:buffer128,
    ghost in_b:buffer128,
    ghost out_b:buffer128,
    ghost stack_b:buffer128,

    ghost key_words:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128
    ) returns (
    ghost ctr_BE:quad32
    )
    lets
//      inp @= rdi; outp @= rsi; len @= rdx; key @= rcx; ivp @= r8; Xip @= r9;
        inp @= rdi; outp @= rsi; len @= rdx; key @= rcx; ivp @= r8; 
        Ii @= xmm0; T1 @= xmm1; T2 @= xmm2; Hkey @= xmm3;
        Z0 @= xmm4; Z1 @= xmm5; Z2 @= xmm6; Z3 @= xmm7; Xi @= xmm8;
    
        inout0 @= xmm9; inout1 @= xmm10; inout2 @= xmm11; inout3 @= xmm12;
        inout4 @= xmm13; inout5 @= xmm14; rndkey @= xmm15;
//      counter @= rbx; rounds @= rbp; ret @= r10; constp @= r11; in0 @= r14; end0 @= r15;
        counter @= rbx; constp @= r11; in0 @= r14;

    reads
        rax; rbp; r9; r10; r15;
        ivp; rsp;
        memTaint;

    modifies
        inp; outp; len; key; counter; constp; r12; r13; in0;
        Ii; T1; T2; Hkey; Z0; Z1; Z2; Z3; Xi;
        inout0; inout1; inout2; inout3; inout4; inout5; rndkey;
        mem; efl;

    requires
        // Valid buffers and pointers
        validDstAddrs128(mem,  ivp,  iv_b,   1, memTaint, Secret);
        validSrcAddrs128(mem,  inp,  in_b, len, memTaint, Secret);
        validDstAddrs128(mem, outp, out_b, len, memTaint, Secret);
        validDstAddrs128(mem, rsp, stack_b, 8, memTaint, Secret);

        buffers_disjoint128(iv_b, keys_b);
        buffers_disjoint128(iv_b, stack_b);
        buffers_disjoint128(iv_b, in_b);
        buffers_disjoint128(iv_b, out_b);
        buffers_disjoint128(stack_b, keys_b);
        buffers_disjoint128(stack_b, in_b);
        buffers_disjoint128(stack_b, out_b);
        buffers_disjoint128(out_b, keys_b);
        buffers_disjoint128(in_b, out_b) || in_b == out_b;

        inp  + 0x10*len < pow2_64;
        outp + 0x10*len < pow2_64;

        buffer_length(in_b) == buffer_length(out_b);
        buffer_length(in_b) == len;
        4096 * (buffer_length(in_b)) * 16 < pow2_32;

        // AES reqs
        buffer_addr(keys_b, mem) + 0x80 < pow2_64;
        aes_reqs(alg, key_words, round_keys, keys_b, key + 0x80, mem, memTaint);

        // Len is # of 128-bit blocks
        len % 6 == 0;
        len >= 0x10*3;
        len / 6 >= 3;   // Should be implied by above... :(
        12 + len + 6 < pow2_32;
    ensures
        let iv_LE := old(buffer128_read(iv_b, 0, mem));
        let iv_BE := reverse_bytes_quad32(iv_LE);
        ctr_BE == Mkfour(2, iv_BE.lo1, iv_BE.hi2, iv_BE.hi3);
        //is_gctr_plain_LE(le_seq_quad32_to_bytes(old(buffer128_as_seq(mem, in_b)))) && is_aes_key_LE(alg, key_words);
        
        le_seq_quad32_to_bytes(buffer128_as_seq(mem, out_b)) == gctr_encrypt_LE(ctr_BE, le_seq_quad32_to_bytes(old(buffer128_as_seq(mem, in_b))), alg, key_words);
{
    ghost var plain_quads := buffer128_as_seq(mem, in_b);
    Load128_buffer(T1, ivp, 0, Secret, iv_b, 0);    // # input counter value
    ghost var iv_LE := T1;
    //assert iv_LE == old(buffer128_read(iv_b, 0, mem));

    Add64(key, 0x80);           // # size optimization 

    // TODO: Replace all of this with a single PinsrdImm(T1, 0x02000000, 3, counter)
    InitPshufbMask(Ii, r12);    // # borrow $Ii for .Lbswap_mask
    VPshufb(T1, T1, Ii);
    ghost var iv_BE := T1;
    //assert iv_BE == reverse_bytes_quad32(iv_LE);
    PinsrdImm(T1, 2, 0, counter);       // Directly set the counter in T1.lo0 (and counter) to 2, rather than read the existing value as OpenSSL does
    //ghost var ctr_BE := T1;
    ctr_BE := T1;
    //assert ctr_BE == Mkfour(2, iv_BE.lo1, iv_BE.hi2, iv_BE.hi3);
    VPshufb(T1, T1, Ii);

    Mov64(in0, outp);

    gctr_partial_opaque_init(alg, buffer128_as_seq(mem, in_b), buffer128_as_seq(mem, out_b), key_words, ctr_BE);
    AESNI_ctr32_6x(alg, 0, in_b, out_b, plain_quads, key_words, round_keys, keys_b, ctr_BE, ctr_BE);
    // # save bswapped output on stack
    VPshufb(Xi, inout0, Ii);
    VPshufb(T2, inout1, Ii);
    Store128_buffer(rsp, Xi, 0x70, Secret, stack_b, 7);
    VPshufb(Z0, inout2, Ii);
    Store128_buffer(rsp, T2, 0x60, Secret, stack_b, 6);
    VPshufb(Z1, inout3, Ii);
    Store128_buffer(rsp, Z0, 0x50, Secret, stack_b, 5);
    VPshufb(Z2, inout4, Ii);
    Store128_buffer(rsp, Z1, 0x40, Secret, stack_b, 4);
    VPshufb(Z3, inout5, Ii);                // # passed to _aesni_ctr32_ghash_6x
    Store128_buffer(rsp, Z2, 0x30, Secret, stack_b, 3);
    
    AESNI_ctr32_6x(alg, 1, in_b, out_b, plain_quads, key_words, round_keys, keys_b, inc32(ctr_BE, 6), ctr_BE);
    Sub64(len, 12);

    Ctr32_ghash_6_prelude(alg, stack_b, key_words, round_keys, keys_b, inc32(ctr_BE, 12));
    Mov64(counter, 14);
    ghost var mid_len := len;
    assert mid_len == old(len) - 12;
    Loop6x_loop(alg, 2, iv_b, out_b, in_b, out_b, stack_b, old(buffer128_as_seq(mem, in_b)), key_words, round_keys, keys_b, ctr_BE, inc32(ctr_BE, 12)); 
    ghost var out_snapshot := buffer128_as_seq(mem, out_b);

    InitPshufbMask(Ii, r12);    // # borrow $Ii for .Lbswap_mask
    assert {:quick_type} old(len) / 6 >= 3;
    ghost var offset_in := #nat((old(len) / 6) - 1);
    Encrypt_save_and_shuffle_output(offset_in, out_b); 

    gctr_partial_opaque_ignores_postfix(alg, #nat32(12+mid_len - 6), old(buffer128_as_seq(mem, in_b)), old(buffer128_as_seq(mem, in_b)), out_snapshot, buffer128_as_seq(mem, out_b),key_words, ctr_BE);
    gctr_partial_extend6(alg, 12+mid_len - 6, old(buffer128_as_seq(mem, in_b)), buffer128_as_seq(mem, out_b), key_words, ctr_BE);
    //assert gctr_partial_opaque(alg, old(len), old(buffer128_as_seq(mem, in_b)), buffer128_as_seq(mem, out_b), key_words, ctr_BE);

    gctr_partial_opaque_completed(alg, old(buffer128_as_seq(mem, in_b)), buffer128_as_seq(mem, out_b), key_words, ctr_BE);
    gctr_partial_to_full_basic(ctr_BE, old(buffer128_as_seq(mem, in_b)), alg, key_words, buffer128_as_seq(mem, out_b));
    //assert {:quick_type} is_gctr_plain_LE(le_seq_quad32_to_bytes(old(buffer128_as_seq(mem, in_b)))) && is_aes_key_LE(alg, key_words);
    //assert le_seq_quad32_to_bytes(buffer128_as_seq(mem, out_b)) == gctr_encrypt_LE(ctr_BE, le_seq_quad32_to_bytes(old(buffer128_as_seq(mem, in_b))), alg, key_words);
}

*/
